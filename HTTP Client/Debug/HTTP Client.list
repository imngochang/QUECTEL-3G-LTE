
HTTP Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e84  20000240  08004db4  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200060c4  08004db4  000260c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8e7  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cd4  00000000  00000000  0002ab57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002d038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ca3  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bab  00000000  00000000  00044413  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086703  00000000  00000000  0004bfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d26c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000d273c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004664 	.word	0x08004664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	08004664 	.word	0x08004664

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HTTP_configParams>:
  * @param  None.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS HTTP_configParams(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	Sim_send("AT+QHTTPCFG=\"contextid\",1\r",26);
 8000594:	211a      	movs	r1, #26
 8000596:	481f      	ldr	r0, [pc, #124]	; (8000614 <HTTP_configParams+0x84>)
 8000598:	f000 fa18 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 800059c:	f241 3288 	movw	r2, #5000	; 0x1388
 80005a0:	2102      	movs	r1, #2
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <HTTP_configParams+0x88>)
 80005a4:	f000 fa76 	bl	8000a94 <Sim_checkResponseWith>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <HTTP_configParams+0x8c>)
 80005ae:	701a      	strb	r2, [r3, #0]
	__NOP();
 80005b0:	bf00      	nop
	if(ret != RET_OK)
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <HTTP_configParams+0x8c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d00b      	beq.n	80005d2 <HTTP_configParams+0x42>
	{
		#if (SIM_DEBUG == 1)
				printf("Error: HTTP contextid failed - %d\r\n",Sim_getErrorCode("+CME ERROR:", NULL));
 80005ba:	2100      	movs	r1, #0
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <HTTP_configParams+0x90>)
 80005be:	f000 fbe1 	bl	8000d84 <Sim_getErrorCode>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4619      	mov	r1, r3
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <HTTP_configParams+0x94>)
 80005c8:	f002 fe16 	bl	80031f8 <iprintf>
		#endif
		return ret;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <HTTP_configParams+0x8c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	e01d      	b.n	800060e <HTTP_configParams+0x7e>
	}
	Sim_send("AT+QHTTPCFG=\"responseheader\",1\r",32);
 80005d2:	2120      	movs	r1, #32
 80005d4:	4814      	ldr	r0, [pc, #80]	; (8000628 <HTTP_configParams+0x98>)
 80005d6:	f000 f9f9 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80005da:	f241 3288 	movw	r2, #5000	; 0x1388
 80005de:	2102      	movs	r1, #2
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <HTTP_configParams+0x88>)
 80005e2:	f000 fa57 	bl	8000a94 <Sim_checkResponseWith>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HTTP_configParams+0x8c>)
 80005ec:	701a      	strb	r2, [r3, #0]
	__NOP();
 80005ee:	bf00      	nop
	if(ret != RET_OK)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HTTP_configParams+0x8c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <HTTP_configParams+0x7a>
	{
		#if (SIM_DEBUG == 1)
				printf("Error: HTTP responseheader failed - %d\r\n",Sim_getErrorCode("+CME ERROR:", NULL));
 80005f8:	2100      	movs	r1, #0
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <HTTP_configParams+0x90>)
 80005fc:	f000 fbc2 	bl	8000d84 <Sim_getErrorCode>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HTTP_configParams+0x9c>)
 8000606:	f002 fdf7 	bl	80031f8 <iprintf>
		#endif
	}
	return ret;
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <HTTP_configParams+0x8c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	0800467c 	.word	0x0800467c
 8000618:	08004698 	.word	0x08004698
 800061c:	20006038 	.word	0x20006038
 8000620:	0800469c 	.word	0x0800469c
 8000624:	080046a8 	.word	0x080046a8
 8000628:	080046cc 	.word	0x080046cc
 800062c:	080046ec 	.word	0x080046ec

08000630 <HTTP_sendGETRequest>:
  * @param  url is URL to access.
  * @retval RET_OK if Server responds to code 200.
  * 		RET_FAIL if otherwise.
  */
STATUS HTTP_sendGETRequest(char* url)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a0      	sub	sp, #128	; 0x80
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
	char cmd[100] = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2264      	movs	r2, #100	; 0x64
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fdd1 	bl	80031e8 <memset>
	sprintf(cmd,"%s%d%s","AT+QHTTPURL=",strlen(url),",30\r");
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff fdca 	bl	80001e0 <strlen>
 800064c:	4602      	mov	r2, r0
 800064e:	f107 0008 	add.w	r0, r7, #8
 8000652:	4b56      	ldr	r3, [pc, #344]	; (80007ac <HTTP_sendGETRequest+0x17c>)
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4613      	mov	r3, r2
 8000658:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <HTTP_sendGETRequest+0x180>)
 800065a:	4956      	ldr	r1, [pc, #344]	; (80007b4 <HTTP_sendGETRequest+0x184>)
 800065c:	f002 fe48 	bl	80032f0 <siprintf>
	Sim_send(cmd,strlen(cmd));
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fdbb 	bl	80001e0 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f9a9 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("CONNECT", 2, 30000);
 800067a:	f247 5230 	movw	r2, #30000	; 0x7530
 800067e:	2102      	movs	r1, #2
 8000680:	484d      	ldr	r0, [pc, #308]	; (80007b8 <HTTP_sendGETRequest+0x188>)
 8000682:	f000 fa07 	bl	8000a94 <Sim_checkResponseWith>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 800068c:	701a      	strb	r2, [r3, #0]
	__NOP();
 800068e:	bf00      	nop
	if(ret == RET_OK)
 8000690:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d17a      	bne.n	800078e <HTTP_sendGETRequest+0x15e>
	{
		Sim_send(url,strlen(url));
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fda1 	bl	80001e0 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f991 	bl	80009cc <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 30000);
 80006aa:	f247 5230 	movw	r2, #30000	; 0x7530
 80006ae:	2102      	movs	r1, #2
 80006b0:	4843      	ldr	r0, [pc, #268]	; (80007c0 <HTTP_sendGETRequest+0x190>)
 80006b2:	f000 f9ef 	bl	8000a94 <Sim_checkResponseWith>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b40      	ldr	r3, [pc, #256]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 80006bc:	701a      	strb	r2, [r3, #0]
		__NOP();
 80006be:	bf00      	nop
		if(ret == RET_OK)
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d16b      	bne.n	80007a0 <HTTP_sendGETRequest+0x170>
		{
			Sim_send("AT+QHTTPGET=60\r",15);
 80006c8:	210f      	movs	r1, #15
 80006ca:	483e      	ldr	r0, [pc, #248]	; (80007c4 <HTTP_sendGETRequest+0x194>)
 80006cc:	f000 f97e 	bl	80009cc <Sim_send>
			ret = Sim_checkResponseWith("+QHTTPGET: ", 3, 60000);
 80006d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80006d4:	2103      	movs	r1, #3
 80006d6:	483c      	ldr	r0, [pc, #240]	; (80007c8 <HTTP_sendGETRequest+0x198>)
 80006d8:	f000 f9dc 	bl	8000a94 <Sim_checkResponseWith>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 80006e2:	701a      	strb	r2, [r3, #0]
			__NOP();
 80006e4:	bf00      	nop
			if(ret == RET_OK)
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d145      	bne.n	800077a <HTTP_sendGETRequest+0x14a>
			{
				//Get HTTP response code
				char* ptr = strstr((char*)Sim_Rxdata,"+QHTTPGET: ");
 80006ee:	4936      	ldr	r1, [pc, #216]	; (80007c8 <HTTP_sendGETRequest+0x198>)
 80006f0:	4836      	ldr	r0, [pc, #216]	; (80007cc <HTTP_sendGETRequest+0x19c>)
 80006f2:	f002 fe1d 	bl	8003330 <strstr>
 80006f6:	6778      	str	r0, [r7, #116]	; 0x74
				char* tok = NULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	673b      	str	r3, [r7, #112]	; 0x70
				tok = strtok(ptr,":");
 80006fc:	4934      	ldr	r1, [pc, #208]	; (80007d0 <HTTP_sendGETRequest+0x1a0>)
 80006fe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000700:	f002 fe30 	bl	8003364 <strtok>
 8000704:	6738      	str	r0, [r7, #112]	; 0x70
				tok = strtok(NULL,",");
 8000706:	4933      	ldr	r1, [pc, #204]	; (80007d4 <HTTP_sendGETRequest+0x1a4>)
 8000708:	2000      	movs	r0, #0
 800070a:	f002 fe2b 	bl	8003364 <strtok>
 800070e:	6738      	str	r0, [r7, #112]	; 0x70
				uint16_t code = atoi(tok);
 8000710:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000712:	f002 fd3b 	bl	800318c <atoi>
 8000716:	4603      	mov	r3, r0
 8000718:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				tok = strtok(NULL,",");
 800071c:	492d      	ldr	r1, [pc, #180]	; (80007d4 <HTTP_sendGETRequest+0x1a4>)
 800071e:	2000      	movs	r0, #0
 8000720:	f002 fe20 	bl	8003364 <strtok>
 8000724:	6738      	str	r0, [r7, #112]	; 0x70
				uint16_t httpcode = atoi(tok);
 8000726:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000728:	f002 fd30 	bl	800318c <atoi>
 800072c:	4603      	mov	r3, r0
 800072e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
				if(code != 0)
 8000732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000736:	2b00      	cmp	r3, #0
 8000738:	d009      	beq.n	800074e <HTTP_sendGETRequest+0x11e>
				{
					ret = RET_FAIL;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
					#if (SIM_DEBUG == 1)
						printf("Error: HTTP GET failed - %d\r\n",code);
 8000740:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000744:	4619      	mov	r1, r3
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <HTTP_sendGETRequest+0x1a8>)
 8000748:	f002 fd56 	bl	80031f8 <iprintf>
 800074c:	e010      	b.n	8000770 <HTTP_sendGETRequest+0x140>
					#endif
				}
				else
				{
					if(httpcode == 200)
 800074e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000752:	2bc8      	cmp	r3, #200	; 0xc8
 8000754:	d103      	bne.n	800075e <HTTP_sendGETRequest+0x12e>
					{
						ret = RET_OK;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e008      	b.n	8000770 <HTTP_sendGETRequest+0x140>
					}
					else
					{
						ret = RET_FAIL;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
						#if (SIM_DEBUG == 1)
							printf("Error: HTTP failed - %d (protocol code)\r\n",httpcode);
 8000764:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <HTTP_sendGETRequest+0x1ac>)
 800076c:	f002 fd44 	bl	80031f8 <iprintf>
						#endif
					}
				}
				deleteBuffer((char*)Sim_Rxdata, 100);
 8000770:	2164      	movs	r1, #100	; 0x64
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <HTTP_sendGETRequest+0x19c>)
 8000774:	f000 f8ea 	bl	800094c <deleteBuffer>
 8000778:	e012      	b.n	80007a0 <HTTP_sendGETRequest+0x170>
			}
			else //AT+QHTTPGET +CME ERROR
			{
				#if (SIM_DEBUG == 1)
					printf("Error: HTTP GET failed - %d (+CME ERROR)\r\n",Sim_getErrorCode("+CME ERROR:", NULL));
 800077a:	2100      	movs	r1, #0
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <HTTP_sendGETRequest+0x1b0>)
 800077e:	f000 fb01 	bl	8000d84 <Sim_getErrorCode>
 8000782:	4603      	mov	r3, r0
 8000784:	4619      	mov	r1, r3
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <HTTP_sendGETRequest+0x1b4>)
 8000788:	f002 fd36 	bl	80031f8 <iprintf>
 800078c:	e008      	b.n	80007a0 <HTTP_sendGETRequest+0x170>
		}
	}
	else //AT+QHTTPURL +CME ERROR
	{
		#if (SIM_DEBUG == 1)
			printf("Error: HTTP URL failed - %d\r\n",Sim_getErrorCode("+CME ERROR:", NULL));
 800078e:	2100      	movs	r1, #0
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <HTTP_sendGETRequest+0x1b0>)
 8000792:	f000 faf7 	bl	8000d84 <Sim_getErrorCode>
 8000796:	4603      	mov	r3, r0
 8000798:	4619      	mov	r1, r3
 800079a:	4813      	ldr	r0, [pc, #76]	; (80007e8 <HTTP_sendGETRequest+0x1b8>)
 800079c:	f002 fd2c 	bl	80031f8 <iprintf>
		#endif
	}
	return ret;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HTTP_sendGETRequest+0x18c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3778      	adds	r7, #120	; 0x78
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08004730 	.word	0x08004730
 80007b0:	08004718 	.word	0x08004718
 80007b4:	08004728 	.word	0x08004728
 80007b8:	08004738 	.word	0x08004738
 80007bc:	20006038 	.word	0x20006038
 80007c0:	08004698 	.word	0x08004698
 80007c4:	08004740 	.word	0x08004740
 80007c8:	08004750 	.word	0x08004750
 80007cc:	20003140 	.word	0x20003140
 80007d0:	0800475c 	.word	0x0800475c
 80007d4:	08004760 	.word	0x08004760
 80007d8:	08004764 	.word	0x08004764
 80007dc:	08004784 	.word	0x08004784
 80007e0:	0800469c 	.word	0x0800469c
 80007e4:	080047b0 	.word	0x080047b0
 80007e8:	080047dc 	.word	0x080047dc

080007ec <HTTP_readGETResponse>:
  * @param  datatoget is used to store response data from the server.
  * @retval RET_OK if read success.
  * 		RET_FAIL if read fail.
  */
STATUS HTTP_readGETResponse(char* datatoget)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	deleteBuffer(datatoget, strlen(datatoget));
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fcf3 	bl	80001e0 <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f8a4 	bl	800094c <deleteBuffer>
	Sim_send("AT+QHTTPREAD=60\r",16);
 8000804:	2110      	movs	r1, #16
 8000806:	4829      	ldr	r0, [pc, #164]	; (80008ac <HTTP_readGETResponse+0xc0>)
 8000808:	f000 f8e0 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("+QHTTPREAD:", 4, 60000);
 800080c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000810:	2104      	movs	r1, #4
 8000812:	4827      	ldr	r0, [pc, #156]	; (80008b0 <HTTP_readGETResponse+0xc4>)
 8000814:	f000 f93e 	bl	8000a94 <Sim_checkResponseWith>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HTTP_readGETResponse+0xc8>)
 800081e:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000820:	bf00      	nop
	if(ret == RET_OK)
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HTTP_readGETResponse+0xc8>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d131      	bne.n	800088e <HTTP_readGETResponse+0xa2>
	{
		uint16_t code = Sim_getErrorCode("+QHTTPREAD:", NULL);
 800082a:	2100      	movs	r1, #0
 800082c:	4820      	ldr	r0, [pc, #128]	; (80008b0 <HTTP_readGETResponse+0xc4>)
 800082e:	f000 faa9 	bl	8000d84 <Sim_getErrorCode>
 8000832:	4603      	mov	r3, r0
 8000834:	82fb      	strh	r3, [r7, #22]
		if(code == 0)
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11f      	bne.n	800087c <HTTP_readGETResponse+0x90>
		{
			char* ptr = NULL;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
			ptr = strstr((char*)Sim_Rxdata,"HTTP/");
 8000840:	491d      	ldr	r1, [pc, #116]	; (80008b8 <HTTP_readGETResponse+0xcc>)
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <HTTP_readGETResponse+0xd0>)
 8000844:	f002 fd74 	bl	8003330 <strstr>
 8000848:	6138      	str	r0, [r7, #16]
			if(ptr != NULL)
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d027      	beq.n	80008a0 <HTTP_readGETResponse+0xb4>
			{
				char* ptr1 = NULL;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
				ptr1 = strstr((char*)Sim_Rxdata,"\r\nOK");
 8000854:	491a      	ldr	r1, [pc, #104]	; (80008c0 <HTTP_readGETResponse+0xd4>)
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <HTTP_readGETResponse+0xd0>)
 8000858:	f002 fd6a 	bl	8003330 <strstr>
 800085c:	60f8      	str	r0, [r7, #12]
				uint16_t startpos = ptr - (char*)Sim_Rxdata;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <HTTP_readGETResponse+0xd0>)
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	817b      	strh	r3, [r7, #10]
				uint16_t endpos = ptr1 - (char*)Sim_Rxdata;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HTTP_readGETResponse+0xd0>)
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	813b      	strh	r3, [r7, #8]
				subString((char*)Sim_Rxdata, datatoget, startpos, endpos);
 800086e:	897a      	ldrh	r2, [r7, #10]
 8000870:	893b      	ldrh	r3, [r7, #8]
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <HTTP_readGETResponse+0xd0>)
 8000876:	f000 f883 	bl	8000980 <subString>
 800087a:	e011      	b.n	80008a0 <HTTP_readGETResponse+0xb4>
			}
		}
		else
		{
			ret = RET_FAIL;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HTTP_readGETResponse+0xc8>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
			#if (SIM_DEBUG == 1)
				printf("Error: HTTP failed - %d\r\n", code);
 8000882:	8afb      	ldrh	r3, [r7, #22]
 8000884:	4619      	mov	r1, r3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <HTTP_readGETResponse+0xd8>)
 8000888:	f002 fcb6 	bl	80031f8 <iprintf>
 800088c:	e008      	b.n	80008a0 <HTTP_readGETResponse+0xb4>
		}
	}
	else //AT+QHTTPREAD +CME ERROR:
	{
		#if (SIM_DEBUG == 1)
			printf("Error: HTTP READ GET failed - %d\r\n",Sim_getErrorCode("+CME ERROR:", NULL));
 800088e:	2100      	movs	r1, #0
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <HTTP_readGETResponse+0xdc>)
 8000892:	f000 fa77 	bl	8000d84 <Sim_getErrorCode>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <HTTP_readGETResponse+0xe0>)
 800089c:	f002 fcac 	bl	80031f8 <iprintf>
		#endif
	}
	return ret;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <HTTP_readGETResponse+0xc8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080047fc 	.word	0x080047fc
 80008b0:	08004810 	.word	0x08004810
 80008b4:	20006038 	.word	0x20006038
 80008b8:	0800481c 	.word	0x0800481c
 80008bc:	20003140 	.word	0x20003140
 80008c0:	08004824 	.word	0x08004824
 80008c4:	0800482c 	.word	0x0800482c
 80008c8:	0800469c 	.word	0x0800469c
 80008cc:	08004848 	.word	0x08004848

080008d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == SIM_USART)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_UART_RxCpltCallback+0x60>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d122      	bne.n	8000928 <HAL_UART_RxCpltCallback+0x58>
	{
		if(Sim_Count == MAX_RECVBUF_LEN)
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_RxCpltCallback+0x64>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d102      	bne.n	80008f6 <HAL_UART_RxCpltCallback+0x26>
		{
			Sim_Count = 0;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_UART_RxCpltCallback+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	801a      	strh	r2, [r3, #0]
		}
		Sim_Rxdata[Sim_Count++] = Sim_Rxbyte[0];
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_UART_RxCpltCallback+0x64>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	b291      	uxth	r1, r2
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <HAL_UART_RxCpltCallback+0x64>)
 8000902:	8011      	strh	r1, [r2, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_UART_RxCpltCallback+0x68>)
 8000908:	7819      	ldrb	r1, [r3, #0]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_UART_RxCpltCallback+0x6c>)
 800090c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 800090e:	2201      	movs	r2, #1
 8000910:	4909      	ldr	r1, [pc, #36]	; (8000938 <HAL_UART_RxCpltCallback+0x68>)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_UART_RxCpltCallback+0x70>)
 8000914:	f001 fde8 	bl	80024e8 <HAL_UART_Receive_IT>
		Sim_UartTime = HAL_GetTick();
 8000918:	f000 fde0 	bl	80014dc <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_UART_RxCpltCallback+0x74>)
 8000920:	601a      	str	r2, [r3, #0]
		isSimResponse = true;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_UART_RxCpltCallback+0x78>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
	}
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40004400 	.word	0x40004400
 8000934:	20006020 	.word	0x20006020
 8000938:	2000313c 	.word	0x2000313c
 800093c:	20003140 	.word	0x20003140
 8000940:	2000607c 	.word	0x2000607c
 8000944:	20006024 	.word	0x20006024
 8000948:	20006022 	.word	0x20006022

0800094c <deleteBuffer>:
  * @param  buf which buffer needs to be deleted
  * @param  len which length of buffer to be deleted.
  * @retval None
  */
void deleteBuffer(char* buf, uint32_t len)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < len; i++)
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e007      	b.n	800096c <deleteBuffer+0x20>
	{
		buf[i] = '\0';
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3301      	adds	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3f3      	bcc.n	800095c <deleteBuffer+0x10>
	}
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <subString>:
  * @param  startpos is the index to start the substring at.
  * @param  endpos is the index to end the substring before.
  * @retval None
  */
void subString(char* maindata, char* subdata, uint32_t startpos, uint32_t endpos)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]
	if(endpos < strlen(maindata))
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff fc26 	bl	80001e0 <strlen>
 8000994:	4602      	mov	r2, r0
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	4293      	cmp	r3, r2
 800099a:	d213      	bcs.n	80009c4 <subString+0x44>
	{
		for(uint32_t i = startpos; i < endpos; i++)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e00c      	b.n	80009bc <subString+0x3c>
		{
			subdata[i - startpos] = maindata[i];
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	441a      	add	r2, r3
 80009a8:	6979      	ldr	r1, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	1acb      	subs	r3, r1, r3
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	440b      	add	r3, r1
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = startpos; i < endpos; i++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3ee      	bcc.n	80009a2 <subString+0x22>
		}
	}
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Sim_send>:
  * @param  command which is AT commands or data.
  * @param  len which is length of AT commands or data.
  * @retval None
  */
STATUS Sim_send(char *command, uint16_t len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
	deleteBuffer((char*)Sim_Rxdata, strlen((char*)Sim_Rxdata));
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <Sim_send+0x44>)
 80009da:	f7ff fc01 	bl	80001e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <Sim_send+0x44>)
 80009e4:	f7ff ffb2 	bl	800094c <deleteBuffer>
	Sim_Count = 0;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <Sim_send+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&SIM_UART, (uint8_t*) command, len, MAX_SEND_TIME) == HAL_OK)
 80009ee:	887a      	ldrh	r2, [r7, #2]
 80009f0:	f642 03b0 	movw	r3, #10416	; 0x28b0
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <Sim_send+0x4c>)
 80009f8:	f001 fcdd 	bl	80023b6 <HAL_UART_Transmit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <Sim_send+0x3a>
	{
		return RET_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <Sim_send+0x3c>
	}
	return RET_TIMEOUT;
 8000a06:	2302      	movs	r3, #2
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20003140 	.word	0x20003140
 8000a14:	20006020 	.word	0x20006020
 8000a18:	2000607c 	.word	0x2000607c

08000a1c <Sim_recv>:
  * @param  timeout which is maximum waiting time for receiving data.
  * @retval RET_TIMEOUT if no response data.
  * 		RET_OK if received a string of data.
  */
STATUS Sim_recv(uint32_t timeout)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000a24:	f000 fd5a 	bl	80014dc <HAL_GetTick>
 8000a28:	60f8      	str	r0, [r7, #12]
	while(isSimResponse == false)
 8000a2a:	e009      	b.n	8000a40 <Sim_recv+0x24>
	{
		if(HAL_GetTick() - time > timeout)
 8000a2c:	f000 fd56 	bl	80014dc <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d201      	bcs.n	8000a40 <Sim_recv+0x24>
		{
			return RET_TIMEOUT;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e020      	b.n	8000a82 <Sim_recv+0x66>
	while(isSimResponse == false)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <Sim_recv+0x70>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f083 0301 	eor.w	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1ed      	bne.n	8000a2c <Sim_recv+0x10>
		}
	}
	HAL_Delay(5);
 8000a50:	2005      	movs	r0, #5
 8000a52:	f000 fd4f 	bl	80014f4 <HAL_Delay>
	uint32_t time1 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		time1 = HAL_GetTick();
 8000a5a:	f000 fd3f 	bl	80014dc <HAL_GetTick>
 8000a5e:	60b8      	str	r0, [r7, #8]
		if((time1 - Sim_UartTime) > 100)
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <Sim_recv+0x74>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b64      	cmp	r3, #100	; 0x64
 8000a6a:	d906      	bls.n	8000a7a <Sim_recv+0x5e>
		{
			__NOP();
 8000a6c:	bf00      	nop
			break;
 8000a6e:	bf00      	nop
		}
		HAL_Delay(1);
	}
	isSimResponse = false;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <Sim_recv+0x70>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e003      	b.n	8000a82 <Sim_recv+0x66>
		HAL_Delay(1);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 fd3a 	bl	80014f4 <HAL_Delay>
		time1 = HAL_GetTick();
 8000a80:	e7eb      	b.n	8000a5a <Sim_recv+0x3e>
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20006022 	.word	0x20006022
 8000a90:	20006024 	.word	0x20006024

08000a94 <Sim_checkResponseWith>:
  * @param	timeout is maximum waiting time of a data
  * @retval RET_FAIL if no userdata data in Sim_Rxdata.
  * 		RET_OK if otherwise.
  */
STATUS Sim_checkResponseWith(char* userdata, uint8_t maxretry, uint32_t timeout)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < maxretry; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e016      	b.n	8000ad6 <Sim_checkResponseWith+0x42>
	{
		if(Sim_recv(timeout) == RET_OK)
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ffb7 	bl	8000a1c <Sim_recv>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10d      	bne.n	8000ad0 <Sim_checkResponseWith+0x3c>
		{
			if(strstr((char*)Sim_Rxdata,userdata) != NULL)
 8000ab4:	68f9      	ldr	r1, [r7, #12]
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <Sim_checkResponseWith+0x74>)
 8000ab8:	f002 fc3a 	bl	8003330 <strstr>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <Sim_checkResponseWith+0x3c>
			{
				__NOP();
 8000ac2:	bf00      	nop
				#if (SIM_DEBUG == 1)
					printf("%s\r\n",(char*)Sim_Rxdata);
 8000ac4:	4910      	ldr	r1, [pc, #64]	; (8000b08 <Sim_checkResponseWith+0x74>)
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <Sim_checkResponseWith+0x78>)
 8000ac8:	f002 fb96 	bl	80031f8 <iprintf>
				#endif
				return RET_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e017      	b.n	8000b00 <Sim_checkResponseWith+0x6c>
	for(i = 0; i < maxretry; i++)
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
 8000ad6:	7dfa      	ldrb	r2, [r7, #23]
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3e4      	bcc.n	8000aa8 <Sim_checkResponseWith+0x14>
			}
		}
	}
	#if (SIM_DEBUG == 1)
		printf("-----Error-----\r\n");
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <Sim_checkResponseWith+0x7c>)
 8000ae0:	f002 fbfe 	bl	80032e0 <puts>
		printf("Max retry = %d\r\n",i);
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <Sim_checkResponseWith+0x80>)
 8000aea:	f002 fb85 	bl	80031f8 <iprintf>
		printf("%s",(char*)Sim_Rxdata);
 8000aee:	4906      	ldr	r1, [pc, #24]	; (8000b08 <Sim_checkResponseWith+0x74>)
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <Sim_checkResponseWith+0x84>)
 8000af2:	f002 fb81 	bl	80031f8 <iprintf>
		printf("---------------\r\n");
 8000af6:	4809      	ldr	r0, [pc, #36]	; (8000b1c <Sim_checkResponseWith+0x88>)
 8000af8:	f002 fbf2 	bl	80032e0 <puts>
	#endif
	__NOP();
 8000afc:	bf00      	nop
	return RET_FAIL;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20003140 	.word	0x20003140
 8000b0c:	0800486c 	.word	0x0800486c
 8000b10:	08004874 	.word	0x08004874
 8000b14:	08004888 	.word	0x08004888
 8000b18:	0800489c 	.word	0x0800489c
 8000b1c:	080048a0 	.word	0x080048a0

08000b20 <Sim_checkOK>:
  * @param  None.
  * @retval RET_FAIL if no response or incorrect data.
  * 		RET_OK if response correct data.
  */
STATUS Sim_checkOK(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	Sim_send("AT\r",3);
 8000b24:	2103      	movs	r1, #3
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <Sim_checkOK+0x2c>)
 8000b28:	f7ff ff50 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("OK", 1, 1000);
 8000b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b30:	2101      	movs	r1, #1
 8000b32:	4807      	ldr	r0, [pc, #28]	; (8000b50 <Sim_checkOK+0x30>)
 8000b34:	f7ff ffae 	bl	8000a94 <Sim_checkResponseWith>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <Sim_checkOK+0x34>)
 8000b3e:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000b40:	bf00      	nop
	return ret;
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <Sim_checkOK+0x34>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	080048b4 	.word	0x080048b4
 8000b50:	080048b8 	.word	0x080048b8
 8000b54:	20006038 	.word	0x20006038

08000b58 <Sim_getSignalQuality>:
  * @param  None.
  * @retval RET_FAIL if 0 < RSSI < 32.
  * 		RET_OK if otherwise.
  */
uint8_t Sim_getSignalQuality(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t rssi = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
	Sim_send("AT+CSQ\r",7);
 8000b62:	2107      	movs	r1, #7
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <Sim_getSignalQuality+0x6c>)
 8000b66:	f7ff ff31 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 3000);
 8000b6a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <Sim_getSignalQuality+0x70>)
 8000b72:	f7ff ff8f 	bl	8000a94 <Sim_checkResponseWith>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <Sim_getSignalQuality+0x74>)
 8000b7c:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000b7e:	bf00      	nop
	if(ret == RET_OK)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <Sim_getSignalQuality+0x74>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d117      	bne.n	8000bb8 <Sim_getSignalQuality+0x60>
	{
		char* tok = strtok((char*)Sim_Rxdata,":");
 8000b88:	4911      	ldr	r1, [pc, #68]	; (8000bd0 <Sim_getSignalQuality+0x78>)
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <Sim_getSignalQuality+0x7c>)
 8000b8c:	f002 fbea 	bl	8003364 <strtok>
 8000b90:	6038      	str	r0, [r7, #0]
		tok = strtok(NULL,",");
 8000b92:	4911      	ldr	r1, [pc, #68]	; (8000bd8 <Sim_getSignalQuality+0x80>)
 8000b94:	2000      	movs	r0, #0
 8000b96:	f002 fbe5 	bl	8003364 <strtok>
 8000b9a:	6038      	str	r0, [r7, #0]
		rssi = atoi(tok);
 8000b9c:	6838      	ldr	r0, [r7, #0]
 8000b9e:	f002 faf5 	bl	800318c <atoi>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
		deleteBuffer((char*)Sim_Rxdata, 100);
 8000ba6:	2164      	movs	r1, #100	; 0x64
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <Sim_getSignalQuality+0x7c>)
 8000baa:	f7ff fecf 	bl	800094c <deleteBuffer>
		if(rssi < 32)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b1f      	cmp	r3, #31
 8000bb2:	d801      	bhi.n	8000bb8 <Sim_getSignalQuality+0x60>
		{
			return rssi;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	e000      	b.n	8000bba <Sim_getSignalQuality+0x62>
		}
	}
	return 99;
 8000bb8:	2363      	movs	r3, #99	; 0x63
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080048bc 	.word	0x080048bc
 8000bc8:	080048b8 	.word	0x080048b8
 8000bcc:	20006038 	.word	0x20006038
 8000bd0:	080048c4 	.word	0x080048c4
 8000bd4:	20003140 	.word	0x20003140
 8000bd8:	080048c8 	.word	0x080048c8

08000bdc <Sim_configInternet>:
  * @param	pass is the password.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS Sim_configInternet(char* apn, char* user, char* pass)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	; 0x70
 8000be0:	af0a      	add	r7, sp, #40	; 0x28
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	char cmd[50] = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 faf9 	bl	80031e8 <memset>
	sprintf(cmd,"%s%s%s%s%s%s%s%s%s%s%s","AT+QICSGP=1,1,","\"",apn,
 8000bf6:	f107 0014 	add.w	r0, r7, #20
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <Sim_configInternet+0xbc>)
 8000bfc:	9308      	str	r3, [sp, #32]
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <Sim_configInternet+0xc0>)
 8000c00:	9307      	str	r3, [sp, #28]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	9306      	str	r3, [sp, #24]
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <Sim_configInternet+0xc4>)
 8000c08:	9305      	str	r3, [sp, #20]
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <Sim_configInternet+0xc0>)
 8000c0c:	9304      	str	r3, [sp, #16]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	9303      	str	r3, [sp, #12]
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <Sim_configInternet+0xc4>)
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <Sim_configInternet+0xc0>)
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <Sim_configInternet+0xc4>)
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <Sim_configInternet+0xc8>)
 8000c22:	4921      	ldr	r1, [pc, #132]	; (8000ca8 <Sim_configInternet+0xcc>)
 8000c24:	f002 fb64 	bl	80032f0 <siprintf>
					"\",","\"",user,"\",","\"",pass,"\",","1\r");
	for(uint8_t i = 0; i < 2; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c2e:	e026      	b.n	8000c7e <Sim_configInternet+0xa2>
	{
		Sim_send(cmd,strlen(cmd));
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fad3 	bl	80001e0 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fec1 	bl	80009cc <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 8000c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4816      	ldr	r0, [pc, #88]	; (8000cac <Sim_configInternet+0xd0>)
 8000c52:	f7ff ff1f 	bl	8000a94 <Sim_checkResponseWith>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <Sim_configInternet+0xd4>)
 8000c5c:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000c5e:	bf00      	nop
		if(ret  == RET_OK)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <Sim_configInternet+0xd4>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00f      	beq.n	8000c88 <Sim_configInternet+0xac>
		{
			break;
		}
		else
		{
			Sim_disconnectInternet();
 8000c68:	f000 f870 	bl	8000d4c <Sim_disconnectInternet>
			HAL_Delay(1000);
 8000c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c70:	f000 fc40 	bl	80014f4 <HAL_Delay>
	for(uint8_t i = 0; i < 2; i++)
 8000c74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d9d4      	bls.n	8000c30 <Sim_configInternet+0x54>
 8000c86:	e000      	b.n	8000c8a <Sim_configInternet+0xae>
			break;
 8000c88:	bf00      	nop
		}
	}
	return ret;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <Sim_configInternet+0xd4>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3748      	adds	r7, #72	; 0x48
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800490c 	.word	0x0800490c
 8000c9c:	08004910 	.word	0x08004910
 8000ca0:	080048e0 	.word	0x080048e0
 8000ca4:	080048e4 	.word	0x080048e4
 8000ca8:	080048f4 	.word	0x080048f4
 8000cac:	080048b8 	.word	0x080048b8
 8000cb0:	20006038 	.word	0x20006038

08000cb4 <Sim_connectInternet>:
  * @param  None.
  * @retval RET_FAIL if connection failed.
  * 		RET_OK if connection successful.
  */
STATUS Sim_connectInternet(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	uint8_t failtime;
	for(failtime = 0; failtime < 2; failtime++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e02c      	b.n	8000d1a <Sim_connectInternet+0x66>
	{
		Sim_send("AT+QIACT=1\r",11);
 8000cc0:	210b      	movs	r1, #11
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <Sim_connectInternet+0x7c>)
 8000cc4:	f7ff fe82 	bl	80009cc <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 8000cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <Sim_connectInternet+0x80>)
 8000cd0:	f7ff fee0 	bl	8000a94 <Sim_checkResponseWith>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <Sim_connectInternet+0x84>)
 8000cda:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000cdc:	bf00      	nop
		if(ret  == RET_OK)
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <Sim_connectInternet+0x84>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d01d      	beq.n	8000d22 <Sim_connectInternet+0x6e>
			break;
		}
		else
		{
			#if (SIM_DEBUG == 1)
				printf("Active PDP failed. Deactive the %d time!\r\n",failtime+1);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <Sim_connectInternet+0x88>)
 8000cee:	f002 fa83 	bl	80031f8 <iprintf>
			#endif
			if(Sim_disconnectInternet() == RET_OK)
 8000cf2:	f000 f82b 	bl	8000d4c <Sim_disconnectInternet>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <Sim_connectInternet+0x54>
			{
				Sim_configInternet(APN, APN_USER, APN_PASS);
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <Sim_connectInternet+0x8c>)
 8000cfe:	4910      	ldr	r1, [pc, #64]	; (8000d40 <Sim_connectInternet+0x8c>)
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <Sim_connectInternet+0x90>)
 8000d02:	f7ff ff6b 	bl	8000bdc <Sim_configInternet>
 8000d06:	e005      	b.n	8000d14 <Sim_connectInternet+0x60>
			}
			else
			{
				if(failtime == 2)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d102      	bne.n	8000d14 <Sim_connectInternet+0x60>
				{
					//Sim_rebootModule();
					#if (SIM_DEBUG == 1)
						printf("Deactive failed 2 times. Reboot module!\r\n");
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <Sim_connectInternet+0x94>)
 8000d10:	f002 fae6 	bl	80032e0 <puts>
	for(failtime = 0; failtime < 2; failtime++)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3301      	adds	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d9cf      	bls.n	8000cc0 <Sim_connectInternet+0xc>
 8000d20:	e000      	b.n	8000d24 <Sim_connectInternet+0x70>
			break;
 8000d22:	bf00      	nop
					#endif
				}
			}
		}
	}
	return ret;
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <Sim_connectInternet+0x84>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08004914 	.word	0x08004914
 8000d34:	080048b8 	.word	0x080048b8
 8000d38:	20006038 	.word	0x20006038
 8000d3c:	08004920 	.word	0x08004920
 8000d40:	0800494c 	.word	0x0800494c
 8000d44:	08004950 	.word	0x08004950
 8000d48:	08004958 	.word	0x08004958

08000d4c <Sim_disconnectInternet>:
  * @param  None.
  * @retval RET_FAIL if disconnection failed.
  * 		RET_OK if disconnection successful.
  */
STATUS Sim_disconnectInternet(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	Sim_send("AT+QIDEACT=1\r",13);
 8000d50:	210d      	movs	r1, #13
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <Sim_disconnectInternet+0x2c>)
 8000d54:	f7ff fe3a 	bl	80009cc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <Sim_disconnectInternet+0x30>)
 8000d60:	f7ff fe98 	bl	8000a94 <Sim_checkResponseWith>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <Sim_disconnectInternet+0x34>)
 8000d6a:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000d6c:	bf00      	nop
	return ret;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <Sim_disconnectInternet+0x34>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08004984 	.word	0x08004984
 8000d7c:	080048b8 	.word	0x080048b8
 8000d80:	20006038 	.word	0x20006038

08000d84 <Sim_getErrorCode>:
  * @param	delim is the delimiter.
  * @retval Error code of HTTP or FTP
  * 		0 if no error.
  */
uint16_t Sim_getErrorCode(char* response, char* delim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	char errorcode[5] = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	711a      	strb	r2, [r3, #4]
	char* ptr = NULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
	ptr = strstr((char*)Sim_Rxdata,response);
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <Sim_getErrorCode+0xb8>)
 8000da0:	f002 fac6 	bl	8003330 <strstr>
 8000da4:	61b8      	str	r0, [r7, #24]
	if(ptr != NULL)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d041      	beq.n	8000e30 <Sim_getErrorCode+0xac>
	{
		uint16_t startpos = ptr - (char*)Sim_Rxdata + strlen(response);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fa17 	bl	80001e0 <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <Sim_getErrorCode+0xb8>)
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	82fb      	strh	r3, [r7, #22]
		uint16_t endpos = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	83fb      	strh	r3, [r7, #30]
		uint16_t len = strlen((char*)Sim_Rxdata);
 8000dca:	481c      	ldr	r0, [pc, #112]	; (8000e3c <Sim_getErrorCode+0xb8>)
 8000dcc:	f7ff fa08 	bl	80001e0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	82bb      	strh	r3, [r7, #20]
		if(delim != NULL)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d018      	beq.n	8000e0c <Sim_getErrorCode+0x88>
		{
			for(uint16_t i = startpos; i < len; i++)
 8000dda:	8afb      	ldrh	r3, [r7, #22]
 8000ddc:	83bb      	strh	r3, [r7, #28]
 8000dde:	e010      	b.n	8000e02 <Sim_getErrorCode+0x7e>
			{
				if(Sim_Rxdata[i] == delim[0])
 8000de0:	8bbb      	ldrh	r3, [r7, #28]
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <Sim_getErrorCode+0xb8>)
 8000de4:	5cd2      	ldrb	r2, [r2, r3]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d106      	bne.n	8000dfc <Sim_getErrorCode+0x78>
				{
					if(i > startpos)
 8000dee:	8bba      	ldrh	r2, [r7, #28]
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d902      	bls.n	8000dfc <Sim_getErrorCode+0x78>
					{
						endpos = i;
 8000df6:	8bbb      	ldrh	r3, [r7, #28]
 8000df8:	83fb      	strh	r3, [r7, #30]
						break;
 8000dfa:	e00a      	b.n	8000e12 <Sim_getErrorCode+0x8e>
			for(uint16_t i = startpos; i < len; i++)
 8000dfc:	8bbb      	ldrh	r3, [r7, #28]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	83bb      	strh	r3, [r7, #28]
 8000e02:	8bba      	ldrh	r2, [r7, #28]
 8000e04:	8abb      	ldrh	r3, [r7, #20]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d3ea      	bcc.n	8000de0 <Sim_getErrorCode+0x5c>
 8000e0a:	e002      	b.n	8000e12 <Sim_getErrorCode+0x8e>
				}
			}
		}
		else
		{
			endpos = startpos + 4; //4 digits after delim
 8000e0c:	8afb      	ldrh	r3, [r7, #22]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	83fb      	strh	r3, [r7, #30]
		}
		subString((char*)Sim_Rxdata, errorcode, startpos, endpos);
 8000e12:	8afa      	ldrh	r2, [r7, #22]
 8000e14:	8bfb      	ldrh	r3, [r7, #30]
 8000e16:	f107 010c 	add.w	r1, r7, #12
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <Sim_getErrorCode+0xb8>)
 8000e1c:	f7ff fdb0 	bl	8000980 <subString>
		return(atoi(errorcode));
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f9b1 	bl	800318c <atoi>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	e000      	b.n	8000e32 <Sim_getErrorCode+0xae>
	}
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20003140 	.word	0x20003140

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fae4 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f84e 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f8fe 	bl	800104c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e50:	f000 f8a8 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f8d0 	bl	8000ff8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	491b      	ldr	r1, [pc, #108]	; (8000ec8 <main+0x88>)
 8000e5c:	481b      	ldr	r0, [pc, #108]	; (8000ecc <main+0x8c>)
 8000e5e:	f001 fb43 	bl	80024e8 <HAL_UART_Receive_IT>
  if(Sim_checkOK() == RET_OK)
 8000e62:	f7ff fe5d 	bl	8000b20 <Sim_checkOK>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d12b      	bne.n	8000ec4 <main+0x84>
  {
	  Sim_RSSI = Sim_getSignalQuality();
 8000e6c:	f7ff fe74 	bl	8000b58 <Sim_getSignalQuality>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <main+0x90>)
 8000e76:	701a      	strb	r2, [r3, #0]
	  if(Sim_RSSI != 99) //99 <=> error
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <main+0x90>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b63      	cmp	r3, #99	; 0x63
 8000e7e:	d021      	beq.n	8000ec4 <main+0x84>
	  {
		  if(Sim_configInternet(APN, APN_USER, APN_PASS) == RET_OK)
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <main+0x94>)
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <main+0x94>)
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <main+0x98>)
 8000e86:	f7ff fea9 	bl	8000bdc <Sim_configInternet>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d119      	bne.n	8000ec4 <main+0x84>
		  {
			  if(Sim_connectInternet() == RET_OK)
 8000e90:	f7ff ff10 	bl	8000cb4 <Sim_connectInternet>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d114      	bne.n	8000ec4 <main+0x84>
			  {
				  if(HTTP_configParams() == RET_OK)
 8000e9a:	f7ff fb79 	bl	8000590 <HTTP_configParams>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10f      	bne.n	8000ec4 <main+0x84>
				  {
					  if(HTTP_sendGETRequest(HTTPServer_URL) == RET_OK)
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <main+0x9c>)
 8000ea6:	f7ff fbc3 	bl	8000630 <HTTP_sendGETRequest>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d109      	bne.n	8000ec4 <main+0x84>
					  {
						  if(HTTP_readGETResponse((char*)HTTP_DataToGet) == RET_OK)
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <main+0xa0>)
 8000eb2:	f7ff fc9b 	bl	80007ec <HTTP_readGETResponse>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <main+0x84>
						  {
							  #if (SIM_DEBUG == 1)
							  	  printf("%s\r\n",HTTP_DataToGet);
 8000ebc:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <main+0xa0>)
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <main+0xa4>)
 8000ec0:	f002 f99a 	bl	80031f8 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x84>
 8000ec6:	bf00      	nop
 8000ec8:	2000313c 	.word	0x2000313c
 8000ecc:	2000607c 	.word	0x2000607c
 8000ed0:	20006028 	.word	0x20006028
 8000ed4:	08004994 	.word	0x08004994
 8000ed8:	08004998 	.word	0x08004998
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	2000025c 	.word	0x2000025c
 8000ee4:	080049a0 	.word	0x080049a0

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2230      	movs	r2, #48	; 0x30
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 f976 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <SystemClock_Config+0xb4>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <SystemClock_Config+0xb4>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <SystemClock_Config+0xb4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <SystemClock_Config+0xb8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <SystemClock_Config+0xb8>)
 8000f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <SystemClock_Config+0xb8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fda3 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f64:	f000 f88c 	bl	8001080 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fffe 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f8e:	f000 f877 	bl	8001080 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	; 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f001 f99e 	bl	800231c <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f84b 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000603c 	.word	0x2000603c
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART2_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001030:	f001 f974 	bl	800231c <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 f821 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000607c 	.word	0x2000607c
 8001048:	40004400 	.word	0x40004400

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_GPIO_Init+0x30>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <MX_GPIO_Init+0x30>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_GPIO_Init+0x30>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001086:	e7fe      	b.n	8001086 <Error_Handler+0x6>

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <HAL_UART_MspInit+0xf8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12d      	bne.n	8001156 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a34      	ldr	r2, [pc, #208]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <HAL_UART_MspInit+0x100>)
 8001150:	f000 fb26 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001154:	e038      	b.n	80011c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_UART_MspInit+0x104>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d133      	bne.n	80011c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0xfc>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001198:	230c      	movs	r3, #12
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a8:	2307      	movs	r3, #7
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <HAL_UART_MspInit+0x100>)
 80011b4:	f000 faf4 	bl	80017a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2026      	movs	r0, #38	; 0x26
 80011be:	f000 fa96 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c2:	2026      	movs	r0, #38	; 0x26
 80011c4:	f000 faaf 	bl	8001726 <HAL_NVIC_EnableIRQ>
}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40004400 	.word	0x40004400

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f942 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f001 f9ab 	bl	8002594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000607c 	.word	0x2000607c

08001248 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
	}

return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
	}
	return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f001 ff1e 	bl	8003194 <__errno>
 8001358:	4602      	mov	r2, r0
 800135a:	230c      	movs	r3, #12
 800135c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20020000 	.word	0x20020000
 8001384:	00000400 	.word	0x00000400
 8001388:	2000602c 	.word	0x2000602c
 800138c:	200060c8 	.word	0x200060c8

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <SystemInit+0x28>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <SystemInit+0x28>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0x28>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	609a      	str	r2, [r3, #8]
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
  ldr  r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffd3 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f001 fed9 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fd27 	bl	8000e40 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013f8:	08004b74 	.word	0x08004b74
  ldr  r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001400:	20000240 	.word	0x20000240
  ldr  r2, =_sbss
 8001404:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8001408:	200060c4 	.word	0x200060c4

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f94d 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe20 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f965 	bl	8001742 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f92d 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000064 	.word	0x20000064
 80014ac:	2000006c 	.word	0x2000006c
 80014b0:	20000068 	.word	0x20000068

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000006c 	.word	0x2000006c
 80014d8:	200060bc 	.word	0x200060bc

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200060bc 	.word	0x200060bc

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_Delay+0x40>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000006c 	.word	0x2000006c

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d004      	beq.n	8001778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e00c      	b.n	8001792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2205      	movs	r2, #5
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e159      	b.n	8001a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8148 	bne.w	8001a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d00b      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	2b11      	cmp	r3, #17
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0xfc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a2 	beq.w	8001a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x202>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x1fe>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x1fa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x1f6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a44      	ldr	r2, [pc, #272]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x1f2>
 800198e:	2304      	movs	r3, #4
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001992:	2307      	movs	r3, #7
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e6:	4a2e      	ldr	r2, [pc, #184]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f aea2 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	; 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e25b      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d075      	beq.n	8001bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac2:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d00c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ace:	4ba0      	ldr	r3, [pc, #640]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d112      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ada:	4b9d      	ldr	r3, [pc, #628]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae6:	d10b      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	4b99      	ldr	r3, [pc, #612]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d05b      	beq.n	8001bac <HAL_RCC_OscConfig+0x108>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d157      	bne.n	8001bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e236      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_OscConfig+0x74>
 8001b0a:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xb0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x98>
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a8a      	ldr	r2, [pc, #552]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xb0>
 8001b3c:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a83      	ldr	r2, [pc, #524]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a80      	ldr	r2, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcbe 	bl	80014dc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fcba 	bl	80014dc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1fb      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fcaa 	bl	80014dc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fca6 	bl	80014dc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1e7      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0xe8>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x152>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1bb      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4952      	ldr	r1, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fc5f 	bl	80014dc <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fc5b 	bl	80014dc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e19c      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4940      	ldr	r1, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fc3e 	bl	80014dc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc3a 	bl	80014dc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e17b      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d030      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fc1e 	bl	80014dc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc1a 	bl	80014dc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e15b      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x200>
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fc07 	bl	80014dc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fc03 	bl	80014dc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e144      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a0 	beq.w	8001e3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d121      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fbc9 	bl	80014dc <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e011      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ce>
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470000 	.word	0x42470000
 8001d58:	42470e80 	.word	0x42470e80
 8001d5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7ff fbbc 	bl	80014dc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0fd      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <HAL_RCC_OscConfig+0x4d4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a7c      	ldr	r2, [pc, #496]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x32a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a76      	ldr	r2, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a73      	ldr	r2, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x32a>
 8001db6:	4b71      	ldr	r3, [pc, #452]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a70      	ldr	r2, [pc, #448]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a6d      	ldr	r2, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb81 	bl	80014dc <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb7d 	bl	80014dc <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0bc      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x33a>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb6b 	bl	80014dc <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb67 	bl	80014dc <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0a6      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8092 	beq.w	8001f6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d05c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d141      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <HAL_RCC_OscConfig+0x4dc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb3b 	bl	80014dc <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fb37 	bl	80014dc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e078      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	4933      	ldr	r1, [pc, #204]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x4dc>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb10 	bl	80014dc <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fb0c 	bl	80014dc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04d      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
 8001ede:	e045      	b.n	8001f6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x4dc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff faf9 	bl	80014dc <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff faf5 	bl	80014dc <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e036      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001f0c:	e02e      	b.n	8001f6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e029      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_RCC_OscConfig+0x4d8>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d115      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470060 	.word	0x42470060

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0cc      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d90c      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	494d      	ldr	r1, [pc, #308]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d044      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d119      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d003      	beq.n	8002042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	2b03      	cmp	r3, #3
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e067      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4934      	ldr	r1, [pc, #208]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff fa32 	bl	80014dc <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7ff fa2e 	bl	80014dc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e04f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d20c      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e032      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4916      	ldr	r1, [pc, #88]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210a:	f000 f821 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	fa21 f303 	lsr.w	r3, r1, r3
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f992 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00
 8002140:	40023800 	.word	0x40023800
 8002144:	080049a8 	.word	0x080049a8
 8002148:	20000064 	.word	0x20000064
 800214c:	20000068 	.word	0x20000068

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002166:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d007      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x32>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d008      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x38>
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 808d 	bne.w	8002296 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800217e:	60bb      	str	r3, [r7, #8]
       break;
 8002180:	e08c      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002184:	60bb      	str	r3, [r7, #8]
      break;
 8002186:	e089      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002192:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d023      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	ea03 0501 	and.w	r5, r3, r1
 80021b4:	ea04 0602 	and.w	r6, r4, r2
 80021b8:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ba:	fb02 f106 	mul.w	r1, r2, r6
 80021be:	2200      	movs	r2, #0
 80021c0:	fb02 f205 	mul.w	r2, r2, r5
 80021c4:	440a      	add	r2, r1
 80021c6:	493a      	ldr	r1, [pc, #232]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021c8:	fba5 0101 	umull	r0, r1, r5, r1
 80021cc:	1853      	adds	r3, r2, r1
 80021ce:	4619      	mov	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	461a      	mov	r2, r3
 80021d8:	4623      	mov	r3, r4
 80021da:	f7fe f859 	bl	8000290 <__aeabi_uldivmod>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e049      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	f04f 0400 	mov.w	r4, #0
 80021f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	ea03 0501 	and.w	r5, r3, r1
 80021fc:	ea04 0602 	and.w	r6, r4, r2
 8002200:	4629      	mov	r1, r5
 8002202:	4632      	mov	r2, r6
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	0154      	lsls	r4, r2, #5
 800220e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002212:	014b      	lsls	r3, r1, #5
 8002214:	4619      	mov	r1, r3
 8002216:	4622      	mov	r2, r4
 8002218:	1b49      	subs	r1, r1, r5
 800221a:	eb62 0206 	sbc.w	r2, r2, r6
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f04f 0400 	mov.w	r4, #0
 8002226:	0194      	lsls	r4, r2, #6
 8002228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800222c:	018b      	lsls	r3, r1, #6
 800222e:	1a5b      	subs	r3, r3, r1
 8002230:	eb64 0402 	sbc.w	r4, r4, r2
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	00e2      	lsls	r2, r4, #3
 800223e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002242:	00d9      	lsls	r1, r3, #3
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	195b      	adds	r3, r3, r5
 800224a:	eb44 0406 	adc.w	r4, r4, r6
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	02a2      	lsls	r2, r4, #10
 8002258:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800225c:	0299      	lsls	r1, r3, #10
 800225e:	460b      	mov	r3, r1
 8002260:	4614      	mov	r4, r2
 8002262:	4618      	mov	r0, r3
 8002264:	4621      	mov	r1, r4
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f04f 0400 	mov.w	r4, #0
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	f7fe f80e 	bl	8000290 <__aeabi_uldivmod>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	3301      	adds	r3, #1
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	60bb      	str	r3, [r7, #8]
      break;
 8002294:	e002      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8002298:	60bb      	str	r3, [r7, #8]
      break;
 800229a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229c:	68bb      	ldr	r3, [r7, #8]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	017d7840 	.word	0x017d7840

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000064 	.word	0x20000064

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d4:	4601      	mov	r1, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0a9b      	lsrs	r3, r3, #10
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	080049b8 	.word	0x080049b8

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022f8:	f7ff ffdc 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022fc:	4601      	mov	r1, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0b5b      	lsrs	r3, r3, #13
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	080049b8 	.word	0x080049b8

0800231c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e03f      	b.n	80023ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fec8 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb97 	bl	8002a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b088      	sub	sp, #32
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	f040 8083 	bne.w	80024de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_UART_Transmit+0x2e>
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e07b      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit+0x40>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e074      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800240c:	f7ff f866 	bl	80014dc <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002426:	e042      	b.n	80024ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d122      	bne.n	8002486 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2200      	movs	r2, #0
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f9b6 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800246c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3302      	adds	r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	e017      	b.n	80024ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	e013      	b.n	80024ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f993 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e01f      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1b7      	bne.n	8002428 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2200      	movs	r2, #0
 80024c0:	2140      	movs	r1, #64	; 0x40
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f97a 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e006      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d140      	bne.n	8002584 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_UART_Receive_IT+0x26>
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e039      	b.n	8002586 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_UART_Receive_IT+0x38>
 800251c:	2302      	movs	r3, #2
 800251e:	e032      	b.n	8002586 <HAL_UART_Receive_IT+0x9e>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2222      	movs	r2, #34	; 0x22
 8002544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_UART_IRQHandler+0x52>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9d6 	bl	8002990 <UART_Receive_IT>
      return;
 80025e4:	e0d1      	b.n	800278a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b0 	beq.w	800274e <HAL_UART_IRQHandler+0x1ba>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_UART_IRQHandler+0x70>
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a5 	beq.w	800274e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_UART_IRQHandler+0x90>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_UART_IRQHandler+0xb0>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_UART_IRQHandler+0xd0>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <HAL_UART_IRQHandler+0xfa>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <HAL_UART_IRQHandler+0xee>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	f043 0208 	orr.w	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d078      	beq.n	8002788 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_UART_IRQHandler+0x11c>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f970 	bl	8002990 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_UART_IRQHandler+0x144>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d031      	beq.n	800273c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8b9 	bl	8002850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d123      	bne.n	8002734 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <HAL_UART_IRQHandler+0x1fc>)
 800270a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f822 	bl	800175a <HAL_DMA_Abort_IT>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d016      	beq.n	800274a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002726:	4610      	mov	r0, r2
 8002728:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272a:	e00e      	b.n	800274a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f83b 	bl	80027a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002732:	e00a      	b.n	800274a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f837 	bl	80027a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273a:	e006      	b.n	800274a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f833 	bl	80027a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002748:	e01e      	b.n	8002788 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274a:	bf00      	nop
    return;
 800274c:	e01c      	b.n	8002788 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_UART_IRQHandler+0x1d6>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8a6 	bl	80028b4 <UART_Transmit_IT>
    return;
 8002768:	e00f      	b.n	800278a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_UART_IRQHandler+0x1f6>
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8ee 	bl	8002960 <UART_EndTransmit_IT>
    return;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002788:	bf00      	nop
  }
}
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	0800288d 	.word	0x0800288d

08002794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027cc:	e02c      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d028      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x30>
 80027dc:	f7fe fe7e 	bl	80014dc <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d21d      	bcs.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e00f      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d0c3      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002866:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ff7e 	bl	80027a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b21      	cmp	r3, #33	; 0x21
 80028c6:	d144      	bne.n	8002952 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d11a      	bne.n	8002908 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]
 80028fa:	e00e      	b.n	800291a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	e008      	b.n	800291a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6211      	str	r1, [r2, #32]
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	84d1      	strh	r1, [r2, #38]	; 0x26
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff07 	bl	8002794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b22      	cmp	r3, #34	; 0x22
 80029a2:	d171      	bne.n	8002a88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d123      	bne.n	80029f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
 80029d8:	e029      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
 80029f4:	e01b      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6858      	ldr	r0, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	1c59      	adds	r1, r3, #1
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6291      	str	r1, [r2, #40]	; 0x28
 8002a0e:	b2c2      	uxtb	r2, r0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e00c      	b.n	8002a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	1c58      	adds	r0, r3, #1
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6288      	str	r0, [r1, #40]	; 0x28
 8002a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d120      	bne.n	8002a84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0220 	bic.w	r2, r2, #32
 8002a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd ff28 	bl	80008d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e002      	b.n	8002a8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ad6:	f023 030c 	bic.w	r3, r3, #12
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b02:	f040 818b 	bne.w	8002e1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4ac1      	ldr	r2, [pc, #772]	; (8002e10 <UART_SetConfig+0x37c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d005      	beq.n	8002b1c <UART_SetConfig+0x88>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4abf      	ldr	r2, [pc, #764]	; (8002e14 <UART_SetConfig+0x380>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 80bd 	bne.w	8002c96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1c:	f7ff fbea 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002b20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	461d      	mov	r5, r3
 8002b26:	f04f 0600 	mov.w	r6, #0
 8002b2a:	46a8      	mov	r8, r5
 8002b2c:	46b1      	mov	r9, r6
 8002b2e:	eb18 0308 	adds.w	r3, r8, r8
 8002b32:	eb49 0409 	adc.w	r4, r9, r9
 8002b36:	4698      	mov	r8, r3
 8002b38:	46a1      	mov	r9, r4
 8002b3a:	eb18 0805 	adds.w	r8, r8, r5
 8002b3e:	eb49 0906 	adc.w	r9, r9, r6
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b56:	4688      	mov	r8, r1
 8002b58:	4691      	mov	r9, r2
 8002b5a:	eb18 0005 	adds.w	r0, r8, r5
 8002b5e:	eb49 0106 	adc.w	r1, r9, r6
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	461d      	mov	r5, r3
 8002b68:	f04f 0600 	mov.w	r6, #0
 8002b6c:	196b      	adds	r3, r5, r5
 8002b6e:	eb46 0406 	adc.w	r4, r6, r6
 8002b72:	461a      	mov	r2, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	f7fd fb8b 	bl	8000290 <__aeabi_uldivmod>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <UART_SetConfig+0x384>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	461d      	mov	r5, r3
 8002b90:	f04f 0600 	mov.w	r6, #0
 8002b94:	46a9      	mov	r9, r5
 8002b96:	46b2      	mov	sl, r6
 8002b98:	eb19 0309 	adds.w	r3, r9, r9
 8002b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	46a2      	mov	sl, r4
 8002ba4:	eb19 0905 	adds.w	r9, r9, r5
 8002ba8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bc0:	4689      	mov	r9, r1
 8002bc2:	4692      	mov	sl, r2
 8002bc4:	eb19 0005 	adds.w	r0, r9, r5
 8002bc8:	eb4a 0106 	adc.w	r1, sl, r6
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	f04f 0600 	mov.w	r6, #0
 8002bd6:	196b      	adds	r3, r5, r5
 8002bd8:	eb46 0406 	adc.w	r4, r6, r6
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	f7fd fb56 	bl	8000290 <__aeabi_uldivmod>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <UART_SetConfig+0x384>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a86      	ldr	r2, [pc, #536]	; (8002e18 <UART_SetConfig+0x384>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c0c:	4498      	add	r8, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	461d      	mov	r5, r3
 8002c12:	f04f 0600 	mov.w	r6, #0
 8002c16:	46a9      	mov	r9, r5
 8002c18:	46b2      	mov	sl, r6
 8002c1a:	eb19 0309 	adds.w	r3, r9, r9
 8002c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c22:	4699      	mov	r9, r3
 8002c24:	46a2      	mov	sl, r4
 8002c26:	eb19 0905 	adds.w	r9, r9, r5
 8002c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c42:	4689      	mov	r9, r1
 8002c44:	4692      	mov	sl, r2
 8002c46:	eb19 0005 	adds.w	r0, r9, r5
 8002c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	461d      	mov	r5, r3
 8002c54:	f04f 0600 	mov.w	r6, #0
 8002c58:	196b      	adds	r3, r5, r5
 8002c5a:	eb46 0406 	adc.w	r4, r6, r6
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4623      	mov	r3, r4
 8002c62:	f7fd fb15 	bl	8000290 <__aeabi_uldivmod>
 8002c66:	4603      	mov	r3, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <UART_SetConfig+0x384>)
 8002c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <UART_SetConfig+0x384>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 0207 	and.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4442      	add	r2, r8
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	e26f      	b.n	8003176 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7ff fb19 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8002c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	f04f 0600 	mov.w	r6, #0
 8002ca4:	46a8      	mov	r8, r5
 8002ca6:	46b1      	mov	r9, r6
 8002ca8:	eb18 0308 	adds.w	r3, r8, r8
 8002cac:	eb49 0409 	adc.w	r4, r9, r9
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	46a1      	mov	r9, r4
 8002cb4:	eb18 0805 	adds.w	r8, r8, r5
 8002cb8:	eb49 0906 	adc.w	r9, r9, r6
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd0:	4688      	mov	r8, r1
 8002cd2:	4691      	mov	r9, r2
 8002cd4:	eb18 0005 	adds.w	r0, r8, r5
 8002cd8:	eb49 0106 	adc.w	r1, r9, r6
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	f04f 0600 	mov.w	r6, #0
 8002ce6:	196b      	adds	r3, r5, r5
 8002ce8:	eb46 0406 	adc.w	r4, r6, r6
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	f7fd face 	bl	8000290 <__aeabi_uldivmod>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <UART_SetConfig+0x384>)
 8002cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	461d      	mov	r5, r3
 8002d0a:	f04f 0600 	mov.w	r6, #0
 8002d0e:	46a9      	mov	r9, r5
 8002d10:	46b2      	mov	sl, r6
 8002d12:	eb19 0309 	adds.w	r3, r9, r9
 8002d16:	eb4a 040a 	adc.w	r4, sl, sl
 8002d1a:	4699      	mov	r9, r3
 8002d1c:	46a2      	mov	sl, r4
 8002d1e:	eb19 0905 	adds.w	r9, r9, r5
 8002d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	eb19 0005 	adds.w	r0, r9, r5
 8002d42:	eb4a 0106 	adc.w	r1, sl, r6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	f04f 0600 	mov.w	r6, #0
 8002d50:	196b      	adds	r3, r5, r5
 8002d52:	eb46 0406 	adc.w	r4, r6, r6
 8002d56:	461a      	mov	r2, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	f7fd fa99 	bl	8000290 <__aeabi_uldivmod>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <UART_SetConfig+0x384>)
 8002d66:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2164      	movs	r1, #100	; 0x64
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	3332      	adds	r3, #50	; 0x32
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <UART_SetConfig+0x384>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d86:	4498      	add	r8, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	f04f 0600 	mov.w	r6, #0
 8002d90:	46a9      	mov	r9, r5
 8002d92:	46b2      	mov	sl, r6
 8002d94:	eb19 0309 	adds.w	r3, r9, r9
 8002d98:	eb4a 040a 	adc.w	r4, sl, sl
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	46a2      	mov	sl, r4
 8002da0:	eb19 0905 	adds.w	r9, r9, r5
 8002da4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dbc:	4689      	mov	r9, r1
 8002dbe:	4692      	mov	sl, r2
 8002dc0:	eb19 0005 	adds.w	r0, r9, r5
 8002dc4:	eb4a 0106 	adc.w	r1, sl, r6
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	461d      	mov	r5, r3
 8002dce:	f04f 0600 	mov.w	r6, #0
 8002dd2:	196b      	adds	r3, r5, r5
 8002dd4:	eb46 0406 	adc.w	r4, r6, r6
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	f7fd fa58 	bl	8000290 <__aeabi_uldivmod>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <UART_SetConfig+0x384>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <UART_SetConfig+0x384>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4442      	add	r2, r8
 8002e0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e0e:	e1b2      	b.n	8003176 <UART_SetConfig+0x6e2>
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4ad7      	ldr	r2, [pc, #860]	; (8003180 <UART_SetConfig+0x6ec>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d005      	beq.n	8002e32 <UART_SetConfig+0x39e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4ad6      	ldr	r2, [pc, #856]	; (8003184 <UART_SetConfig+0x6f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f040 80d1 	bne.w	8002fd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e32:	f7ff fa5f 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	469a      	mov	sl, r3
 8002e3c:	f04f 0b00 	mov.w	fp, #0
 8002e40:	46d0      	mov	r8, sl
 8002e42:	46d9      	mov	r9, fp
 8002e44:	eb18 0308 	adds.w	r3, r8, r8
 8002e48:	eb49 0409 	adc.w	r4, r9, r9
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	46a1      	mov	r9, r4
 8002e50:	eb18 080a 	adds.w	r8, r8, sl
 8002e54:	eb49 090b 	adc.w	r9, r9, fp
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4691      	mov	r9, r2
 8002e70:	eb1a 0508 	adds.w	r5, sl, r8
 8002e74:	eb4b 0609 	adc.w	r6, fp, r9
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	0094      	lsls	r4, r2, #2
 8002e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4623      	mov	r3, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	4631      	mov	r1, r6
 8002e9a:	f7fd f9f9 	bl	8000290 <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4bb8      	ldr	r3, [pc, #736]	; (8003188 <UART_SetConfig+0x6f4>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	469b      	mov	fp, r3
 8002eb4:	f04f 0c00 	mov.w	ip, #0
 8002eb8:	46d9      	mov	r9, fp
 8002eba:	46e2      	mov	sl, ip
 8002ebc:	eb19 0309 	adds.w	r3, r9, r9
 8002ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	46a2      	mov	sl, r4
 8002ec8:	eb19 090b 	adds.w	r9, r9, fp
 8002ecc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ee4:	4689      	mov	r9, r1
 8002ee6:	4692      	mov	sl, r2
 8002ee8:	eb1b 0509 	adds.w	r5, fp, r9
 8002eec:	eb4c 060a 	adc.w	r6, ip, sl
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	0094      	lsls	r4, r2, #2
 8002f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	4628      	mov	r0, r5
 8002f10:	4631      	mov	r1, r6
 8002f12:	f7fd f9bd 	bl	8000290 <__aeabi_uldivmod>
 8002f16:	4603      	mov	r3, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b9a      	ldr	r3, [pc, #616]	; (8003188 <UART_SetConfig+0x6f4>)
 8002f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2164      	movs	r1, #100	; 0x64
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a95      	ldr	r2, [pc, #596]	; (8003188 <UART_SetConfig+0x6f4>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3c:	4498      	add	r8, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	469b      	mov	fp, r3
 8002f42:	f04f 0c00 	mov.w	ip, #0
 8002f46:	46d9      	mov	r9, fp
 8002f48:	46e2      	mov	sl, ip
 8002f4a:	eb19 0309 	adds.w	r3, r9, r9
 8002f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f52:	4699      	mov	r9, r3
 8002f54:	46a2      	mov	sl, r4
 8002f56:	eb19 090b 	adds.w	r9, r9, fp
 8002f5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f72:	4689      	mov	r9, r1
 8002f74:	4692      	mov	sl, r2
 8002f76:	eb1b 0509 	adds.w	r5, fp, r9
 8002f7a:	eb4c 060a 	adc.w	r6, ip, sl
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f04f 0400 	mov.w	r4, #0
 8002f90:	0094      	lsls	r4, r2, #2
 8002f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f96:	008b      	lsls	r3, r1, #2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	f7fd f976 	bl	8000290 <__aeabi_uldivmod>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b77      	ldr	r3, [pc, #476]	; (8003188 <UART_SetConfig+0x6f4>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	2164      	movs	r1, #100	; 0x64
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	3332      	adds	r3, #50	; 0x32
 8002fbe:	4a72      	ldr	r2, [pc, #456]	; (8003188 <UART_SetConfig+0x6f4>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4442      	add	r2, r8
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	e0d0      	b.n	8003176 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff f97a 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8002fd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	469a      	mov	sl, r3
 8002fde:	f04f 0b00 	mov.w	fp, #0
 8002fe2:	46d0      	mov	r8, sl
 8002fe4:	46d9      	mov	r9, fp
 8002fe6:	eb18 0308 	adds.w	r3, r8, r8
 8002fea:	eb49 0409 	adc.w	r4, r9, r9
 8002fee:	4698      	mov	r8, r3
 8002ff0:	46a1      	mov	r9, r4
 8002ff2:	eb18 080a 	adds.w	r8, r8, sl
 8002ff6:	eb49 090b 	adc.w	r9, r9, fp
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003006:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800300a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800300e:	4688      	mov	r8, r1
 8003010:	4691      	mov	r9, r2
 8003012:	eb1a 0508 	adds.w	r5, sl, r8
 8003016:	eb4b 0609 	adc.w	r6, fp, r9
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	0094      	lsls	r4, r2, #2
 800302e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	4628      	mov	r0, r5
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd f928 	bl	8000290 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b50      	ldr	r3, [pc, #320]	; (8003188 <UART_SetConfig+0x6f4>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	469b      	mov	fp, r3
 8003056:	f04f 0c00 	mov.w	ip, #0
 800305a:	46d9      	mov	r9, fp
 800305c:	46e2      	mov	sl, ip
 800305e:	eb19 0309 	adds.w	r3, r9, r9
 8003062:	eb4a 040a 	adc.w	r4, sl, sl
 8003066:	4699      	mov	r9, r3
 8003068:	46a2      	mov	sl, r4
 800306a:	eb19 090b 	adds.w	r9, r9, fp
 800306e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003086:	4689      	mov	r9, r1
 8003088:	4692      	mov	sl, r2
 800308a:	eb1b 0509 	adds.w	r5, fp, r9
 800308e:	eb4c 060a 	adc.w	r6, ip, sl
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	0094      	lsls	r4, r2, #2
 80030a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030aa:	008b      	lsls	r3, r1, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	4628      	mov	r0, r5
 80030b2:	4631      	mov	r1, r6
 80030b4:	f7fd f8ec 	bl	8000290 <__aeabi_uldivmod>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	461a      	mov	r2, r3
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <UART_SetConfig+0x6f4>)
 80030c0:	fba3 1302 	umull	r1, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	2164      	movs	r1, #100	; 0x64
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	3332      	adds	r3, #50	; 0x32
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <UART_SetConfig+0x6f4>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030de:	4498      	add	r8, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	469b      	mov	fp, r3
 80030e4:	f04f 0c00 	mov.w	ip, #0
 80030e8:	46d9      	mov	r9, fp
 80030ea:	46e2      	mov	sl, ip
 80030ec:	eb19 0309 	adds.w	r3, r9, r9
 80030f0:	eb4a 040a 	adc.w	r4, sl, sl
 80030f4:	4699      	mov	r9, r3
 80030f6:	46a2      	mov	sl, r4
 80030f8:	eb19 090b 	adds.w	r9, r9, fp
 80030fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800310c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003114:	4689      	mov	r9, r1
 8003116:	4692      	mov	sl, r2
 8003118:	eb1b 0509 	adds.w	r5, fp, r9
 800311c:	eb4c 060a 	adc.w	r6, ip, sl
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f04f 0400 	mov.w	r4, #0
 8003132:	0094      	lsls	r4, r2, #2
 8003134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003138:	008b      	lsls	r3, r1, #2
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	4628      	mov	r0, r5
 8003140:	4631      	mov	r1, r6
 8003142:	f7fd f8a5 	bl	8000290 <__aeabi_uldivmod>
 8003146:	4603      	mov	r3, r0
 8003148:	460c      	mov	r4, r1
 800314a:	461a      	mov	r2, r3
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <UART_SetConfig+0x6f4>)
 800314e:	fba3 1302 	umull	r1, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2164      	movs	r1, #100	; 0x64
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	3332      	adds	r3, #50	; 0x32
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <UART_SetConfig+0x6f4>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4442      	add	r2, r8
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	e7ff      	b.n	8003176 <UART_SetConfig+0x6e2>
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <atoi>:
 800318c:	220a      	movs	r2, #10
 800318e:	2100      	movs	r1, #0
 8003190:	f000 b9b8 	b.w	8003504 <strtol>

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000070 	.word	0x20000070

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4e0d      	ldr	r6, [pc, #52]	; (80031d8 <__libc_init_array+0x38>)
 80031a4:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a6:	1ba4      	subs	r4, r4, r6
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	2500      	movs	r5, #0
 80031ac:	42a5      	cmp	r5, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	4e0b      	ldr	r6, [pc, #44]	; (80031e0 <__libc_init_array+0x40>)
 80031b2:	4c0c      	ldr	r4, [pc, #48]	; (80031e4 <__libc_init_array+0x44>)
 80031b4:	f001 fa56 	bl	8004664 <_init>
 80031b8:	1ba4      	subs	r4, r4, r6
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	2500      	movs	r5, #0
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c8:	4798      	blx	r3
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d2:	4798      	blx	r3
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08004b6c 	.word	0x08004b6c
 80031dc:	08004b6c 	.word	0x08004b6c
 80031e0:	08004b6c 	.word	0x08004b6c
 80031e4:	08004b70 	.word	0x08004b70

080031e8 <memset>:
 80031e8:	4402      	add	r2, r0
 80031ea:	4603      	mov	r3, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <iprintf>:
 80031f8:	b40f      	push	{r0, r1, r2, r3}
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <iprintf+0x2c>)
 80031fc:	b513      	push	{r0, r1, r4, lr}
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	b124      	cbz	r4, 800320c <iprintf+0x14>
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	b913      	cbnz	r3, 800320c <iprintf+0x14>
 8003206:	4620      	mov	r0, r4
 8003208:	f000 fb42 	bl	8003890 <__sinit>
 800320c:	ab05      	add	r3, sp, #20
 800320e:	9a04      	ldr	r2, [sp, #16]
 8003210:	68a1      	ldr	r1, [r4, #8]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	4620      	mov	r0, r4
 8003216:	f000 fe6b 	bl	8003ef0 <_vfiprintf_r>
 800321a:	b002      	add	sp, #8
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003220:	b004      	add	sp, #16
 8003222:	4770      	bx	lr
 8003224:	20000070 	.word	0x20000070

08003228 <_puts_r>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	460e      	mov	r6, r1
 800322c:	4605      	mov	r5, r0
 800322e:	b118      	cbz	r0, 8003238 <_puts_r+0x10>
 8003230:	6983      	ldr	r3, [r0, #24]
 8003232:	b90b      	cbnz	r3, 8003238 <_puts_r+0x10>
 8003234:	f000 fb2c 	bl	8003890 <__sinit>
 8003238:	69ab      	ldr	r3, [r5, #24]
 800323a:	68ac      	ldr	r4, [r5, #8]
 800323c:	b913      	cbnz	r3, 8003244 <_puts_r+0x1c>
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fb26 	bl	8003890 <__sinit>
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <_puts_r+0xac>)
 8003246:	429c      	cmp	r4, r3
 8003248:	d117      	bne.n	800327a <_puts_r+0x52>
 800324a:	686c      	ldr	r4, [r5, #4]
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	071b      	lsls	r3, r3, #28
 8003250:	d51d      	bpl.n	800328e <_puts_r+0x66>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	b1db      	cbz	r3, 800328e <_puts_r+0x66>
 8003256:	3e01      	subs	r6, #1
 8003258:	68a3      	ldr	r3, [r4, #8]
 800325a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800325e:	3b01      	subs	r3, #1
 8003260:	60a3      	str	r3, [r4, #8]
 8003262:	b9e9      	cbnz	r1, 80032a0 <_puts_r+0x78>
 8003264:	2b00      	cmp	r3, #0
 8003266:	da2e      	bge.n	80032c6 <_puts_r+0x9e>
 8003268:	4622      	mov	r2, r4
 800326a:	210a      	movs	r1, #10
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f95f 	bl	8003530 <__swbuf_r>
 8003272:	3001      	adds	r0, #1
 8003274:	d011      	beq.n	800329a <_puts_r+0x72>
 8003276:	200a      	movs	r0, #10
 8003278:	e011      	b.n	800329e <_puts_r+0x76>
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <_puts_r+0xb0>)
 800327c:	429c      	cmp	r4, r3
 800327e:	d101      	bne.n	8003284 <_puts_r+0x5c>
 8003280:	68ac      	ldr	r4, [r5, #8]
 8003282:	e7e3      	b.n	800324c <_puts_r+0x24>
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <_puts_r+0xb4>)
 8003286:	429c      	cmp	r4, r3
 8003288:	bf08      	it	eq
 800328a:	68ec      	ldreq	r4, [r5, #12]
 800328c:	e7de      	b.n	800324c <_puts_r+0x24>
 800328e:	4621      	mov	r1, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 f99f 	bl	80035d4 <__swsetup_r>
 8003296:	2800      	cmp	r0, #0
 8003298:	d0dd      	beq.n	8003256 <_puts_r+0x2e>
 800329a:	f04f 30ff 	mov.w	r0, #4294967295
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da04      	bge.n	80032ae <_puts_r+0x86>
 80032a4:	69a2      	ldr	r2, [r4, #24]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dc06      	bgt.n	80032b8 <_puts_r+0x90>
 80032aa:	290a      	cmp	r1, #10
 80032ac:	d004      	beq.n	80032b8 <_puts_r+0x90>
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	6022      	str	r2, [r4, #0]
 80032b4:	7019      	strb	r1, [r3, #0]
 80032b6:	e7cf      	b.n	8003258 <_puts_r+0x30>
 80032b8:	4622      	mov	r2, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 f938 	bl	8003530 <__swbuf_r>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d1c9      	bne.n	8003258 <_puts_r+0x30>
 80032c4:	e7e9      	b.n	800329a <_puts_r+0x72>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	200a      	movs	r0, #10
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	6022      	str	r2, [r4, #0]
 80032ce:	7018      	strb	r0, [r3, #0]
 80032d0:	e7e5      	b.n	800329e <_puts_r+0x76>
 80032d2:	bf00      	nop
 80032d4:	080049e4 	.word	0x080049e4
 80032d8:	08004a04 	.word	0x08004a04
 80032dc:	080049c4 	.word	0x080049c4

080032e0 <puts>:
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <puts+0xc>)
 80032e2:	4601      	mov	r1, r0
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	f7ff bf9f 	b.w	8003228 <_puts_r>
 80032ea:	bf00      	nop
 80032ec:	20000070 	.word	0x20000070

080032f0 <siprintf>:
 80032f0:	b40e      	push	{r1, r2, r3}
 80032f2:	b500      	push	{lr}
 80032f4:	b09c      	sub	sp, #112	; 0x70
 80032f6:	ab1d      	add	r3, sp, #116	; 0x74
 80032f8:	9002      	str	r0, [sp, #8]
 80032fa:	9006      	str	r0, [sp, #24]
 80032fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003300:	4809      	ldr	r0, [pc, #36]	; (8003328 <siprintf+0x38>)
 8003302:	9107      	str	r1, [sp, #28]
 8003304:	9104      	str	r1, [sp, #16]
 8003306:	4909      	ldr	r1, [pc, #36]	; (800332c <siprintf+0x3c>)
 8003308:	f853 2b04 	ldr.w	r2, [r3], #4
 800330c:	9105      	str	r1, [sp, #20]
 800330e:	6800      	ldr	r0, [r0, #0]
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	a902      	add	r1, sp, #8
 8003314:	f000 fcca 	bl	8003cac <_svfiprintf_r>
 8003318:	9b02      	ldr	r3, [sp, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	b01c      	add	sp, #112	; 0x70
 8003320:	f85d eb04 	ldr.w	lr, [sp], #4
 8003324:	b003      	add	sp, #12
 8003326:	4770      	bx	lr
 8003328:	20000070 	.word	0x20000070
 800332c:	ffff0208 	.word	0xffff0208

08003330 <strstr>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	7803      	ldrb	r3, [r0, #0]
 8003334:	b17b      	cbz	r3, 8003356 <strstr+0x26>
 8003336:	4604      	mov	r4, r0
 8003338:	7823      	ldrb	r3, [r4, #0]
 800333a:	4620      	mov	r0, r4
 800333c:	1c66      	adds	r6, r4, #1
 800333e:	b17b      	cbz	r3, 8003360 <strstr+0x30>
 8003340:	1e4a      	subs	r2, r1, #1
 8003342:	1e63      	subs	r3, r4, #1
 8003344:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003348:	b14d      	cbz	r5, 800335e <strstr+0x2e>
 800334a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800334e:	42af      	cmp	r7, r5
 8003350:	4634      	mov	r4, r6
 8003352:	d0f7      	beq.n	8003344 <strstr+0x14>
 8003354:	e7f0      	b.n	8003338 <strstr+0x8>
 8003356:	780b      	ldrb	r3, [r1, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf18      	it	ne
 800335c:	2000      	movne	r0, #0
 800335e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003360:	4618      	mov	r0, r3
 8003362:	e7fc      	b.n	800335e <strstr+0x2e>

08003364 <strtok>:
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <strtok+0x50>)
 8003366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336a:	681d      	ldr	r5, [r3, #0]
 800336c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800336e:	4606      	mov	r6, r0
 8003370:	460f      	mov	r7, r1
 8003372:	b9b4      	cbnz	r4, 80033a2 <strtok+0x3e>
 8003374:	2050      	movs	r0, #80	; 0x50
 8003376:	f000 fb7d 	bl	8003a74 <malloc>
 800337a:	65a8      	str	r0, [r5, #88]	; 0x58
 800337c:	e9c0 4400 	strd	r4, r4, [r0]
 8003380:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003384:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003388:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800338c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003390:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003394:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003398:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800339c:	6184      	str	r4, [r0, #24]
 800339e:	7704      	strb	r4, [r0, #28]
 80033a0:	6244      	str	r4, [r0, #36]	; 0x24
 80033a2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80033a4:	4639      	mov	r1, r7
 80033a6:	4630      	mov	r0, r6
 80033a8:	2301      	movs	r3, #1
 80033aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ae:	f000 b803 	b.w	80033b8 <__strtok_r>
 80033b2:	bf00      	nop
 80033b4:	20000070 	.word	0x20000070

080033b8 <__strtok_r>:
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b918      	cbnz	r0, 80033c4 <__strtok_r+0xc>
 80033bc:	6810      	ldr	r0, [r2, #0]
 80033be:	b908      	cbnz	r0, 80033c4 <__strtok_r+0xc>
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	4620      	mov	r0, r4
 80033c4:	4604      	mov	r4, r0
 80033c6:	460f      	mov	r7, r1
 80033c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80033cc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80033d0:	b91e      	cbnz	r6, 80033da <__strtok_r+0x22>
 80033d2:	b96d      	cbnz	r5, 80033f0 <__strtok_r+0x38>
 80033d4:	6015      	str	r5, [r2, #0]
 80033d6:	4628      	mov	r0, r5
 80033d8:	e7f2      	b.n	80033c0 <__strtok_r+0x8>
 80033da:	42b5      	cmp	r5, r6
 80033dc:	d1f6      	bne.n	80033cc <__strtok_r+0x14>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <__strtok_r+0xa>
 80033e2:	6014      	str	r4, [r2, #0]
 80033e4:	7003      	strb	r3, [r0, #0]
 80033e6:	e7eb      	b.n	80033c0 <__strtok_r+0x8>
 80033e8:	462b      	mov	r3, r5
 80033ea:	e00d      	b.n	8003408 <__strtok_r+0x50>
 80033ec:	b926      	cbnz	r6, 80033f8 <__strtok_r+0x40>
 80033ee:	461c      	mov	r4, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	460f      	mov	r7, r1
 80033f4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80033f8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80033fc:	42b5      	cmp	r5, r6
 80033fe:	d1f5      	bne.n	80033ec <__strtok_r+0x34>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d0f1      	beq.n	80033e8 <__strtok_r+0x30>
 8003404:	2100      	movs	r1, #0
 8003406:	7021      	strb	r1, [r4, #0]
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e7d9      	b.n	80033c0 <__strtok_r+0x8>

0800340c <_strtol_l.isra.0>:
 800340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003410:	4680      	mov	r8, r0
 8003412:	4689      	mov	r9, r1
 8003414:	4692      	mov	sl, r2
 8003416:	461e      	mov	r6, r3
 8003418:	460f      	mov	r7, r1
 800341a:	463d      	mov	r5, r7
 800341c:	9808      	ldr	r0, [sp, #32]
 800341e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003422:	f000 fabf 	bl	80039a4 <__locale_ctype_ptr_l>
 8003426:	4420      	add	r0, r4
 8003428:	7843      	ldrb	r3, [r0, #1]
 800342a:	f013 0308 	ands.w	r3, r3, #8
 800342e:	d132      	bne.n	8003496 <_strtol_l.isra.0+0x8a>
 8003430:	2c2d      	cmp	r4, #45	; 0x2d
 8003432:	d132      	bne.n	800349a <_strtol_l.isra.0+0x8e>
 8003434:	787c      	ldrb	r4, [r7, #1]
 8003436:	1cbd      	adds	r5, r7, #2
 8003438:	2201      	movs	r2, #1
 800343a:	2e00      	cmp	r6, #0
 800343c:	d05d      	beq.n	80034fa <_strtol_l.isra.0+0xee>
 800343e:	2e10      	cmp	r6, #16
 8003440:	d109      	bne.n	8003456 <_strtol_l.isra.0+0x4a>
 8003442:	2c30      	cmp	r4, #48	; 0x30
 8003444:	d107      	bne.n	8003456 <_strtol_l.isra.0+0x4a>
 8003446:	782b      	ldrb	r3, [r5, #0]
 8003448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800344c:	2b58      	cmp	r3, #88	; 0x58
 800344e:	d14f      	bne.n	80034f0 <_strtol_l.isra.0+0xe4>
 8003450:	786c      	ldrb	r4, [r5, #1]
 8003452:	2610      	movs	r6, #16
 8003454:	3502      	adds	r5, #2
 8003456:	2a00      	cmp	r2, #0
 8003458:	bf14      	ite	ne
 800345a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800345e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003462:	2700      	movs	r7, #0
 8003464:	fbb1 fcf6 	udiv	ip, r1, r6
 8003468:	4638      	mov	r0, r7
 800346a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800346e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003472:	2b09      	cmp	r3, #9
 8003474:	d817      	bhi.n	80034a6 <_strtol_l.isra.0+0x9a>
 8003476:	461c      	mov	r4, r3
 8003478:	42a6      	cmp	r6, r4
 800347a:	dd23      	ble.n	80034c4 <_strtol_l.isra.0+0xb8>
 800347c:	1c7b      	adds	r3, r7, #1
 800347e:	d007      	beq.n	8003490 <_strtol_l.isra.0+0x84>
 8003480:	4584      	cmp	ip, r0
 8003482:	d31c      	bcc.n	80034be <_strtol_l.isra.0+0xb2>
 8003484:	d101      	bne.n	800348a <_strtol_l.isra.0+0x7e>
 8003486:	45a6      	cmp	lr, r4
 8003488:	db19      	blt.n	80034be <_strtol_l.isra.0+0xb2>
 800348a:	fb00 4006 	mla	r0, r0, r6, r4
 800348e:	2701      	movs	r7, #1
 8003490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003494:	e7eb      	b.n	800346e <_strtol_l.isra.0+0x62>
 8003496:	462f      	mov	r7, r5
 8003498:	e7bf      	b.n	800341a <_strtol_l.isra.0+0xe>
 800349a:	2c2b      	cmp	r4, #43	; 0x2b
 800349c:	bf04      	itt	eq
 800349e:	1cbd      	addeq	r5, r7, #2
 80034a0:	787c      	ldrbeq	r4, [r7, #1]
 80034a2:	461a      	mov	r2, r3
 80034a4:	e7c9      	b.n	800343a <_strtol_l.isra.0+0x2e>
 80034a6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80034aa:	2b19      	cmp	r3, #25
 80034ac:	d801      	bhi.n	80034b2 <_strtol_l.isra.0+0xa6>
 80034ae:	3c37      	subs	r4, #55	; 0x37
 80034b0:	e7e2      	b.n	8003478 <_strtol_l.isra.0+0x6c>
 80034b2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80034b6:	2b19      	cmp	r3, #25
 80034b8:	d804      	bhi.n	80034c4 <_strtol_l.isra.0+0xb8>
 80034ba:	3c57      	subs	r4, #87	; 0x57
 80034bc:	e7dc      	b.n	8003478 <_strtol_l.isra.0+0x6c>
 80034be:	f04f 37ff 	mov.w	r7, #4294967295
 80034c2:	e7e5      	b.n	8003490 <_strtol_l.isra.0+0x84>
 80034c4:	1c7b      	adds	r3, r7, #1
 80034c6:	d108      	bne.n	80034da <_strtol_l.isra.0+0xce>
 80034c8:	2322      	movs	r3, #34	; 0x22
 80034ca:	f8c8 3000 	str.w	r3, [r8]
 80034ce:	4608      	mov	r0, r1
 80034d0:	f1ba 0f00 	cmp.w	sl, #0
 80034d4:	d107      	bne.n	80034e6 <_strtol_l.isra.0+0xda>
 80034d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034da:	b102      	cbz	r2, 80034de <_strtol_l.isra.0+0xd2>
 80034dc:	4240      	negs	r0, r0
 80034de:	f1ba 0f00 	cmp.w	sl, #0
 80034e2:	d0f8      	beq.n	80034d6 <_strtol_l.isra.0+0xca>
 80034e4:	b10f      	cbz	r7, 80034ea <_strtol_l.isra.0+0xde>
 80034e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80034ea:	f8ca 9000 	str.w	r9, [sl]
 80034ee:	e7f2      	b.n	80034d6 <_strtol_l.isra.0+0xca>
 80034f0:	2430      	movs	r4, #48	; 0x30
 80034f2:	2e00      	cmp	r6, #0
 80034f4:	d1af      	bne.n	8003456 <_strtol_l.isra.0+0x4a>
 80034f6:	2608      	movs	r6, #8
 80034f8:	e7ad      	b.n	8003456 <_strtol_l.isra.0+0x4a>
 80034fa:	2c30      	cmp	r4, #48	; 0x30
 80034fc:	d0a3      	beq.n	8003446 <_strtol_l.isra.0+0x3a>
 80034fe:	260a      	movs	r6, #10
 8003500:	e7a9      	b.n	8003456 <_strtol_l.isra.0+0x4a>
	...

08003504 <strtol>:
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <strtol+0x24>)
 8003506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003508:	681c      	ldr	r4, [r3, #0]
 800350a:	4d08      	ldr	r5, [pc, #32]	; (800352c <strtol+0x28>)
 800350c:	6a23      	ldr	r3, [r4, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf08      	it	eq
 8003512:	462b      	moveq	r3, r5
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	460a      	mov	r2, r1
 800351a:	4601      	mov	r1, r0
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff ff75 	bl	800340c <_strtol_l.isra.0>
 8003522:	b003      	add	sp, #12
 8003524:	bd30      	pop	{r4, r5, pc}
 8003526:	bf00      	nop
 8003528:	20000070 	.word	0x20000070
 800352c:	200000d4 	.word	0x200000d4

08003530 <__swbuf_r>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	460e      	mov	r6, r1
 8003534:	4614      	mov	r4, r2
 8003536:	4605      	mov	r5, r0
 8003538:	b118      	cbz	r0, 8003542 <__swbuf_r+0x12>
 800353a:	6983      	ldr	r3, [r0, #24]
 800353c:	b90b      	cbnz	r3, 8003542 <__swbuf_r+0x12>
 800353e:	f000 f9a7 	bl	8003890 <__sinit>
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <__swbuf_r+0x98>)
 8003544:	429c      	cmp	r4, r3
 8003546:	d12a      	bne.n	800359e <__swbuf_r+0x6e>
 8003548:	686c      	ldr	r4, [r5, #4]
 800354a:	69a3      	ldr	r3, [r4, #24]
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	071a      	lsls	r2, r3, #28
 8003552:	d52e      	bpl.n	80035b2 <__swbuf_r+0x82>
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	b363      	cbz	r3, 80035b2 <__swbuf_r+0x82>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	1ac0      	subs	r0, r0, r3
 800355e:	6963      	ldr	r3, [r4, #20]
 8003560:	b2f6      	uxtb	r6, r6
 8003562:	4283      	cmp	r3, r0
 8003564:	4637      	mov	r7, r6
 8003566:	dc04      	bgt.n	8003572 <__swbuf_r+0x42>
 8003568:	4621      	mov	r1, r4
 800356a:	4628      	mov	r0, r5
 800356c:	f000 f926 	bl	80037bc <_fflush_r>
 8003570:	bb28      	cbnz	r0, 80035be <__swbuf_r+0x8e>
 8003572:	68a3      	ldr	r3, [r4, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	6022      	str	r2, [r4, #0]
 800357e:	701e      	strb	r6, [r3, #0]
 8003580:	6963      	ldr	r3, [r4, #20]
 8003582:	3001      	adds	r0, #1
 8003584:	4283      	cmp	r3, r0
 8003586:	d004      	beq.n	8003592 <__swbuf_r+0x62>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	07db      	lsls	r3, r3, #31
 800358c:	d519      	bpl.n	80035c2 <__swbuf_r+0x92>
 800358e:	2e0a      	cmp	r6, #10
 8003590:	d117      	bne.n	80035c2 <__swbuf_r+0x92>
 8003592:	4621      	mov	r1, r4
 8003594:	4628      	mov	r0, r5
 8003596:	f000 f911 	bl	80037bc <_fflush_r>
 800359a:	b190      	cbz	r0, 80035c2 <__swbuf_r+0x92>
 800359c:	e00f      	b.n	80035be <__swbuf_r+0x8e>
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <__swbuf_r+0x9c>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d101      	bne.n	80035a8 <__swbuf_r+0x78>
 80035a4:	68ac      	ldr	r4, [r5, #8]
 80035a6:	e7d0      	b.n	800354a <__swbuf_r+0x1a>
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <__swbuf_r+0xa0>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	bf08      	it	eq
 80035ae:	68ec      	ldreq	r4, [r5, #12]
 80035b0:	e7cb      	b.n	800354a <__swbuf_r+0x1a>
 80035b2:	4621      	mov	r1, r4
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 f80d 	bl	80035d4 <__swsetup_r>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d0cc      	beq.n	8003558 <__swbuf_r+0x28>
 80035be:	f04f 37ff 	mov.w	r7, #4294967295
 80035c2:	4638      	mov	r0, r7
 80035c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	080049e4 	.word	0x080049e4
 80035cc:	08004a04 	.word	0x08004a04
 80035d0:	080049c4 	.word	0x080049c4

080035d4 <__swsetup_r>:
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <__swsetup_r+0xcc>)
 80035d6:	b570      	push	{r4, r5, r6, lr}
 80035d8:	681d      	ldr	r5, [r3, #0]
 80035da:	4606      	mov	r6, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	b125      	cbz	r5, 80035ea <__swsetup_r+0x16>
 80035e0:	69ab      	ldr	r3, [r5, #24]
 80035e2:	b913      	cbnz	r3, 80035ea <__swsetup_r+0x16>
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f953 	bl	8003890 <__sinit>
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <__swsetup_r+0xd0>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	d10f      	bne.n	8003610 <__swsetup_r+0x3c>
 80035f0:	686c      	ldr	r4, [r5, #4]
 80035f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	0715      	lsls	r5, r2, #28
 80035fa:	d42c      	bmi.n	8003656 <__swsetup_r+0x82>
 80035fc:	06d0      	lsls	r0, r2, #27
 80035fe:	d411      	bmi.n	8003624 <__swsetup_r+0x50>
 8003600:	2209      	movs	r2, #9
 8003602:	6032      	str	r2, [r6, #0]
 8003604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	e03e      	b.n	800368e <__swsetup_r+0xba>
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <__swsetup_r+0xd4>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d101      	bne.n	800361a <__swsetup_r+0x46>
 8003616:	68ac      	ldr	r4, [r5, #8]
 8003618:	e7eb      	b.n	80035f2 <__swsetup_r+0x1e>
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <__swsetup_r+0xd8>)
 800361c:	429c      	cmp	r4, r3
 800361e:	bf08      	it	eq
 8003620:	68ec      	ldreq	r4, [r5, #12]
 8003622:	e7e6      	b.n	80035f2 <__swsetup_r+0x1e>
 8003624:	0751      	lsls	r1, r2, #29
 8003626:	d512      	bpl.n	800364e <__swsetup_r+0x7a>
 8003628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800362a:	b141      	cbz	r1, 800363e <__swsetup_r+0x6a>
 800362c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003630:	4299      	cmp	r1, r3
 8003632:	d002      	beq.n	800363a <__swsetup_r+0x66>
 8003634:	4630      	mov	r0, r6
 8003636:	f000 fa37 	bl	8003aa8 <_free_r>
 800363a:	2300      	movs	r3, #0
 800363c:	6363      	str	r3, [r4, #52]	; 0x34
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	2300      	movs	r3, #0
 8003648:	6063      	str	r3, [r4, #4]
 800364a:	6923      	ldr	r3, [r4, #16]
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	f043 0308 	orr.w	r3, r3, #8
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	b94b      	cbnz	r3, 800366e <__swsetup_r+0x9a>
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d003      	beq.n	800366e <__swsetup_r+0x9a>
 8003666:	4621      	mov	r1, r4
 8003668:	4630      	mov	r0, r6
 800366a:	f000 f9c3 	bl	80039f4 <__smakebuf_r>
 800366e:	89a2      	ldrh	r2, [r4, #12]
 8003670:	f012 0301 	ands.w	r3, r2, #1
 8003674:	d00c      	beq.n	8003690 <__swsetup_r+0xbc>
 8003676:	2300      	movs	r3, #0
 8003678:	60a3      	str	r3, [r4, #8]
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	425b      	negs	r3, r3
 800367e:	61a3      	str	r3, [r4, #24]
 8003680:	6923      	ldr	r3, [r4, #16]
 8003682:	b953      	cbnz	r3, 800369a <__swsetup_r+0xc6>
 8003684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003688:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800368c:	d1ba      	bne.n	8003604 <__swsetup_r+0x30>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	0792      	lsls	r2, r2, #30
 8003692:	bf58      	it	pl
 8003694:	6963      	ldrpl	r3, [r4, #20]
 8003696:	60a3      	str	r3, [r4, #8]
 8003698:	e7f2      	b.n	8003680 <__swsetup_r+0xac>
 800369a:	2000      	movs	r0, #0
 800369c:	e7f7      	b.n	800368e <__swsetup_r+0xba>
 800369e:	bf00      	nop
 80036a0:	20000070 	.word	0x20000070
 80036a4:	080049e4 	.word	0x080049e4
 80036a8:	08004a04 	.word	0x08004a04
 80036ac:	080049c4 	.word	0x080049c4

080036b0 <__sflush_r>:
 80036b0:	898a      	ldrh	r2, [r1, #12]
 80036b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	4605      	mov	r5, r0
 80036b8:	0710      	lsls	r0, r2, #28
 80036ba:	460c      	mov	r4, r1
 80036bc:	d458      	bmi.n	8003770 <__sflush_r+0xc0>
 80036be:	684b      	ldr	r3, [r1, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	dc05      	bgt.n	80036d0 <__sflush_r+0x20>
 80036c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	dc02      	bgt.n	80036d0 <__sflush_r+0x20>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d0f9      	beq.n	80036ca <__sflush_r+0x1a>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036dc:	682f      	ldr	r7, [r5, #0]
 80036de:	6a21      	ldr	r1, [r4, #32]
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	d032      	beq.n	800374a <__sflush_r+0x9a>
 80036e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	075a      	lsls	r2, r3, #29
 80036ea:	d505      	bpl.n	80036f8 <__sflush_r+0x48>
 80036ec:	6863      	ldr	r3, [r4, #4]
 80036ee:	1ac0      	subs	r0, r0, r3
 80036f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036f2:	b10b      	cbz	r3, 80036f8 <__sflush_r+0x48>
 80036f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f6:	1ac0      	subs	r0, r0, r3
 80036f8:	2300      	movs	r3, #0
 80036fa:	4602      	mov	r2, r0
 80036fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036fe:	6a21      	ldr	r1, [r4, #32]
 8003700:	4628      	mov	r0, r5
 8003702:	47b0      	blx	r6
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	d106      	bne.n	8003718 <__sflush_r+0x68>
 800370a:	6829      	ldr	r1, [r5, #0]
 800370c:	291d      	cmp	r1, #29
 800370e:	d848      	bhi.n	80037a2 <__sflush_r+0xf2>
 8003710:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <__sflush_r+0x108>)
 8003712:	40ca      	lsrs	r2, r1
 8003714:	07d6      	lsls	r6, r2, #31
 8003716:	d544      	bpl.n	80037a2 <__sflush_r+0xf2>
 8003718:	2200      	movs	r2, #0
 800371a:	6062      	str	r2, [r4, #4]
 800371c:	04d9      	lsls	r1, r3, #19
 800371e:	6922      	ldr	r2, [r4, #16]
 8003720:	6022      	str	r2, [r4, #0]
 8003722:	d504      	bpl.n	800372e <__sflush_r+0x7e>
 8003724:	1c42      	adds	r2, r0, #1
 8003726:	d101      	bne.n	800372c <__sflush_r+0x7c>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b903      	cbnz	r3, 800372e <__sflush_r+0x7e>
 800372c:	6560      	str	r0, [r4, #84]	; 0x54
 800372e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003730:	602f      	str	r7, [r5, #0]
 8003732:	2900      	cmp	r1, #0
 8003734:	d0c9      	beq.n	80036ca <__sflush_r+0x1a>
 8003736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800373a:	4299      	cmp	r1, r3
 800373c:	d002      	beq.n	8003744 <__sflush_r+0x94>
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f9b2 	bl	8003aa8 <_free_r>
 8003744:	2000      	movs	r0, #0
 8003746:	6360      	str	r0, [r4, #52]	; 0x34
 8003748:	e7c0      	b.n	80036cc <__sflush_r+0x1c>
 800374a:	2301      	movs	r3, #1
 800374c:	4628      	mov	r0, r5
 800374e:	47b0      	blx	r6
 8003750:	1c41      	adds	r1, r0, #1
 8003752:	d1c8      	bne.n	80036e6 <__sflush_r+0x36>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0c5      	beq.n	80036e6 <__sflush_r+0x36>
 800375a:	2b1d      	cmp	r3, #29
 800375c:	d001      	beq.n	8003762 <__sflush_r+0xb2>
 800375e:	2b16      	cmp	r3, #22
 8003760:	d101      	bne.n	8003766 <__sflush_r+0xb6>
 8003762:	602f      	str	r7, [r5, #0]
 8003764:	e7b1      	b.n	80036ca <__sflush_r+0x1a>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800376c:	81a3      	strh	r3, [r4, #12]
 800376e:	e7ad      	b.n	80036cc <__sflush_r+0x1c>
 8003770:	690f      	ldr	r7, [r1, #16]
 8003772:	2f00      	cmp	r7, #0
 8003774:	d0a9      	beq.n	80036ca <__sflush_r+0x1a>
 8003776:	0793      	lsls	r3, r2, #30
 8003778:	680e      	ldr	r6, [r1, #0]
 800377a:	bf08      	it	eq
 800377c:	694b      	ldreq	r3, [r1, #20]
 800377e:	600f      	str	r7, [r1, #0]
 8003780:	bf18      	it	ne
 8003782:	2300      	movne	r3, #0
 8003784:	eba6 0807 	sub.w	r8, r6, r7
 8003788:	608b      	str	r3, [r1, #8]
 800378a:	f1b8 0f00 	cmp.w	r8, #0
 800378e:	dd9c      	ble.n	80036ca <__sflush_r+0x1a>
 8003790:	4643      	mov	r3, r8
 8003792:	463a      	mov	r2, r7
 8003794:	6a21      	ldr	r1, [r4, #32]
 8003796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003798:	4628      	mov	r0, r5
 800379a:	47b0      	blx	r6
 800379c:	2800      	cmp	r0, #0
 800379e:	dc06      	bgt.n	80037ae <__sflush_r+0xfe>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e78e      	b.n	80036cc <__sflush_r+0x1c>
 80037ae:	4407      	add	r7, r0
 80037b0:	eba8 0800 	sub.w	r8, r8, r0
 80037b4:	e7e9      	b.n	800378a <__sflush_r+0xda>
 80037b6:	bf00      	nop
 80037b8:	20400001 	.word	0x20400001

080037bc <_fflush_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	690b      	ldr	r3, [r1, #16]
 80037c0:	4605      	mov	r5, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	b1db      	cbz	r3, 80037fe <_fflush_r+0x42>
 80037c6:	b118      	cbz	r0, 80037d0 <_fflush_r+0x14>
 80037c8:	6983      	ldr	r3, [r0, #24]
 80037ca:	b90b      	cbnz	r3, 80037d0 <_fflush_r+0x14>
 80037cc:	f000 f860 	bl	8003890 <__sinit>
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <_fflush_r+0x48>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d109      	bne.n	80037ea <_fflush_r+0x2e>
 80037d6:	686c      	ldr	r4, [r5, #4]
 80037d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037dc:	b17b      	cbz	r3, 80037fe <_fflush_r+0x42>
 80037de:	4621      	mov	r1, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e6:	f7ff bf63 	b.w	80036b0 <__sflush_r>
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <_fflush_r+0x4c>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d101      	bne.n	80037f4 <_fflush_r+0x38>
 80037f0:	68ac      	ldr	r4, [r5, #8]
 80037f2:	e7f1      	b.n	80037d8 <_fflush_r+0x1c>
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <_fflush_r+0x50>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	bf08      	it	eq
 80037fa:	68ec      	ldreq	r4, [r5, #12]
 80037fc:	e7ec      	b.n	80037d8 <_fflush_r+0x1c>
 80037fe:	2000      	movs	r0, #0
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	080049e4 	.word	0x080049e4
 8003808:	08004a04 	.word	0x08004a04
 800380c:	080049c4 	.word	0x080049c4

08003810 <std>:
 8003810:	2300      	movs	r3, #0
 8003812:	b510      	push	{r4, lr}
 8003814:	4604      	mov	r4, r0
 8003816:	e9c0 3300 	strd	r3, r3, [r0]
 800381a:	6083      	str	r3, [r0, #8]
 800381c:	8181      	strh	r1, [r0, #12]
 800381e:	6643      	str	r3, [r0, #100]	; 0x64
 8003820:	81c2      	strh	r2, [r0, #14]
 8003822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003826:	6183      	str	r3, [r0, #24]
 8003828:	4619      	mov	r1, r3
 800382a:	2208      	movs	r2, #8
 800382c:	305c      	adds	r0, #92	; 0x5c
 800382e:	f7ff fcdb 	bl	80031e8 <memset>
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <std+0x38>)
 8003834:	6263      	str	r3, [r4, #36]	; 0x24
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <std+0x3c>)
 8003838:	62a3      	str	r3, [r4, #40]	; 0x28
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <std+0x40>)
 800383c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std+0x44>)
 8003840:	6224      	str	r4, [r4, #32]
 8003842:	6323      	str	r3, [r4, #48]	; 0x30
 8003844:	bd10      	pop	{r4, pc}
 8003846:	bf00      	nop
 8003848:	0800444d 	.word	0x0800444d
 800384c:	0800446f 	.word	0x0800446f
 8003850:	080044a7 	.word	0x080044a7
 8003854:	080044cb 	.word	0x080044cb

08003858 <_cleanup_r>:
 8003858:	4901      	ldr	r1, [pc, #4]	; (8003860 <_cleanup_r+0x8>)
 800385a:	f000 b885 	b.w	8003968 <_fwalk_reent>
 800385e:	bf00      	nop
 8003860:	080037bd 	.word	0x080037bd

08003864 <__sfmoreglue>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	1e4a      	subs	r2, r1, #1
 8003868:	2568      	movs	r5, #104	; 0x68
 800386a:	4355      	muls	r5, r2
 800386c:	460e      	mov	r6, r1
 800386e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003872:	f000 f967 	bl	8003b44 <_malloc_r>
 8003876:	4604      	mov	r4, r0
 8003878:	b140      	cbz	r0, 800388c <__sfmoreglue+0x28>
 800387a:	2100      	movs	r1, #0
 800387c:	e9c0 1600 	strd	r1, r6, [r0]
 8003880:	300c      	adds	r0, #12
 8003882:	60a0      	str	r0, [r4, #8]
 8003884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003888:	f7ff fcae 	bl	80031e8 <memset>
 800388c:	4620      	mov	r0, r4
 800388e:	bd70      	pop	{r4, r5, r6, pc}

08003890 <__sinit>:
 8003890:	6983      	ldr	r3, [r0, #24]
 8003892:	b510      	push	{r4, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	bb33      	cbnz	r3, 80038e6 <__sinit+0x56>
 8003898:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800389c:	6503      	str	r3, [r0, #80]	; 0x50
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <__sinit+0x58>)
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <__sinit+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6282      	str	r2, [r0, #40]	; 0x28
 80038a6:	4298      	cmp	r0, r3
 80038a8:	bf04      	itt	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	6183      	streq	r3, [r0, #24]
 80038ae:	f000 f81f 	bl	80038f0 <__sfp>
 80038b2:	6060      	str	r0, [r4, #4]
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 f81b 	bl	80038f0 <__sfp>
 80038ba:	60a0      	str	r0, [r4, #8]
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f817 	bl	80038f0 <__sfp>
 80038c2:	2200      	movs	r2, #0
 80038c4:	60e0      	str	r0, [r4, #12]
 80038c6:	2104      	movs	r1, #4
 80038c8:	6860      	ldr	r0, [r4, #4]
 80038ca:	f7ff ffa1 	bl	8003810 <std>
 80038ce:	2201      	movs	r2, #1
 80038d0:	2109      	movs	r1, #9
 80038d2:	68a0      	ldr	r0, [r4, #8]
 80038d4:	f7ff ff9c 	bl	8003810 <std>
 80038d8:	2202      	movs	r2, #2
 80038da:	2112      	movs	r1, #18
 80038dc:	68e0      	ldr	r0, [r4, #12]
 80038de:	f7ff ff97 	bl	8003810 <std>
 80038e2:	2301      	movs	r3, #1
 80038e4:	61a3      	str	r3, [r4, #24]
 80038e6:	bd10      	pop	{r4, pc}
 80038e8:	080049c0 	.word	0x080049c0
 80038ec:	08003859 	.word	0x08003859

080038f0 <__sfp>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <__sfp+0x70>)
 80038f4:	681e      	ldr	r6, [r3, #0]
 80038f6:	69b3      	ldr	r3, [r6, #24]
 80038f8:	4607      	mov	r7, r0
 80038fa:	b913      	cbnz	r3, 8003902 <__sfp+0x12>
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff ffc7 	bl	8003890 <__sinit>
 8003902:	3648      	adds	r6, #72	; 0x48
 8003904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003908:	3b01      	subs	r3, #1
 800390a:	d503      	bpl.n	8003914 <__sfp+0x24>
 800390c:	6833      	ldr	r3, [r6, #0]
 800390e:	b133      	cbz	r3, 800391e <__sfp+0x2e>
 8003910:	6836      	ldr	r6, [r6, #0]
 8003912:	e7f7      	b.n	8003904 <__sfp+0x14>
 8003914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003918:	b16d      	cbz	r5, 8003936 <__sfp+0x46>
 800391a:	3468      	adds	r4, #104	; 0x68
 800391c:	e7f4      	b.n	8003908 <__sfp+0x18>
 800391e:	2104      	movs	r1, #4
 8003920:	4638      	mov	r0, r7
 8003922:	f7ff ff9f 	bl	8003864 <__sfmoreglue>
 8003926:	6030      	str	r0, [r6, #0]
 8003928:	2800      	cmp	r0, #0
 800392a:	d1f1      	bne.n	8003910 <__sfp+0x20>
 800392c:	230c      	movs	r3, #12
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4604      	mov	r4, r0
 8003932:	4620      	mov	r0, r4
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <__sfp+0x74>)
 8003938:	6665      	str	r5, [r4, #100]	; 0x64
 800393a:	e9c4 5500 	strd	r5, r5, [r4]
 800393e:	60a5      	str	r5, [r4, #8]
 8003940:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003944:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003948:	2208      	movs	r2, #8
 800394a:	4629      	mov	r1, r5
 800394c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003950:	f7ff fc4a 	bl	80031e8 <memset>
 8003954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800395c:	e7e9      	b.n	8003932 <__sfp+0x42>
 800395e:	bf00      	nop
 8003960:	080049c0 	.word	0x080049c0
 8003964:	ffff0001 	.word	0xffff0001

08003968 <_fwalk_reent>:
 8003968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800396c:	4680      	mov	r8, r0
 800396e:	4689      	mov	r9, r1
 8003970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003974:	2600      	movs	r6, #0
 8003976:	b914      	cbnz	r4, 800397e <_fwalk_reent+0x16>
 8003978:	4630      	mov	r0, r6
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003982:	3f01      	subs	r7, #1
 8003984:	d501      	bpl.n	800398a <_fwalk_reent+0x22>
 8003986:	6824      	ldr	r4, [r4, #0]
 8003988:	e7f5      	b.n	8003976 <_fwalk_reent+0xe>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d907      	bls.n	80039a0 <_fwalk_reent+0x38>
 8003990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003994:	3301      	adds	r3, #1
 8003996:	d003      	beq.n	80039a0 <_fwalk_reent+0x38>
 8003998:	4629      	mov	r1, r5
 800399a:	4640      	mov	r0, r8
 800399c:	47c8      	blx	r9
 800399e:	4306      	orrs	r6, r0
 80039a0:	3568      	adds	r5, #104	; 0x68
 80039a2:	e7ee      	b.n	8003982 <_fwalk_reent+0x1a>

080039a4 <__locale_ctype_ptr_l>:
 80039a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80039a8:	4770      	bx	lr

080039aa <__swhatbuf_r>:
 80039aa:	b570      	push	{r4, r5, r6, lr}
 80039ac:	460e      	mov	r6, r1
 80039ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b2:	2900      	cmp	r1, #0
 80039b4:	b096      	sub	sp, #88	; 0x58
 80039b6:	4614      	mov	r4, r2
 80039b8:	461d      	mov	r5, r3
 80039ba:	da07      	bge.n	80039cc <__swhatbuf_r+0x22>
 80039bc:	2300      	movs	r3, #0
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	89b3      	ldrh	r3, [r6, #12]
 80039c2:	061a      	lsls	r2, r3, #24
 80039c4:	d410      	bmi.n	80039e8 <__swhatbuf_r+0x3e>
 80039c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ca:	e00e      	b.n	80039ea <__swhatbuf_r+0x40>
 80039cc:	466a      	mov	r2, sp
 80039ce:	f000 fdaf 	bl	8004530 <_fstat_r>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	dbf2      	blt.n	80039bc <__swhatbuf_r+0x12>
 80039d6:	9a01      	ldr	r2, [sp, #4]
 80039d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039e0:	425a      	negs	r2, r3
 80039e2:	415a      	adcs	r2, r3
 80039e4:	602a      	str	r2, [r5, #0]
 80039e6:	e7ee      	b.n	80039c6 <__swhatbuf_r+0x1c>
 80039e8:	2340      	movs	r3, #64	; 0x40
 80039ea:	2000      	movs	r0, #0
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	b016      	add	sp, #88	; 0x58
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080039f4 <__smakebuf_r>:
 80039f4:	898b      	ldrh	r3, [r1, #12]
 80039f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039f8:	079d      	lsls	r5, r3, #30
 80039fa:	4606      	mov	r6, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	d507      	bpl.n	8003a10 <__smakebuf_r+0x1c>
 8003a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	6163      	str	r3, [r4, #20]
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	ab01      	add	r3, sp, #4
 8003a12:	466a      	mov	r2, sp
 8003a14:	f7ff ffc9 	bl	80039aa <__swhatbuf_r>
 8003a18:	9900      	ldr	r1, [sp, #0]
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f891 	bl	8003b44 <_malloc_r>
 8003a22:	b948      	cbnz	r0, 8003a38 <__smakebuf_r+0x44>
 8003a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a28:	059a      	lsls	r2, r3, #22
 8003a2a:	d4ef      	bmi.n	8003a0c <__smakebuf_r+0x18>
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	e7e3      	b.n	8003a00 <__smakebuf_r+0xc>
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <__smakebuf_r+0x7c>)
 8003a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	6020      	str	r0, [r4, #0]
 8003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a44:	81a3      	strh	r3, [r4, #12]
 8003a46:	9b00      	ldr	r3, [sp, #0]
 8003a48:	6163      	str	r3, [r4, #20]
 8003a4a:	9b01      	ldr	r3, [sp, #4]
 8003a4c:	6120      	str	r0, [r4, #16]
 8003a4e:	b15b      	cbz	r3, 8003a68 <__smakebuf_r+0x74>
 8003a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a54:	4630      	mov	r0, r6
 8003a56:	f000 fd7d 	bl	8004554 <_isatty_r>
 8003a5a:	b128      	cbz	r0, 8003a68 <__smakebuf_r+0x74>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	431d      	orrs	r5, r3
 8003a6c:	81a5      	strh	r5, [r4, #12]
 8003a6e:	e7cd      	b.n	8003a0c <__smakebuf_r+0x18>
 8003a70:	08003859 	.word	0x08003859

08003a74 <malloc>:
 8003a74:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <malloc+0xc>)
 8003a76:	4601      	mov	r1, r0
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f000 b863 	b.w	8003b44 <_malloc_r>
 8003a7e:	bf00      	nop
 8003a80:	20000070 	.word	0x20000070

08003a84 <__ascii_mbtowc>:
 8003a84:	b082      	sub	sp, #8
 8003a86:	b901      	cbnz	r1, 8003a8a <__ascii_mbtowc+0x6>
 8003a88:	a901      	add	r1, sp, #4
 8003a8a:	b142      	cbz	r2, 8003a9e <__ascii_mbtowc+0x1a>
 8003a8c:	b14b      	cbz	r3, 8003aa2 <__ascii_mbtowc+0x1e>
 8003a8e:	7813      	ldrb	r3, [r2, #0]
 8003a90:	600b      	str	r3, [r1, #0]
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	1c10      	adds	r0, r2, #0
 8003a96:	bf18      	it	ne
 8003a98:	2001      	movne	r0, #1
 8003a9a:	b002      	add	sp, #8
 8003a9c:	4770      	bx	lr
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	e7fb      	b.n	8003a9a <__ascii_mbtowc+0x16>
 8003aa2:	f06f 0001 	mvn.w	r0, #1
 8003aa6:	e7f8      	b.n	8003a9a <__ascii_mbtowc+0x16>

08003aa8 <_free_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4605      	mov	r5, r0
 8003aac:	2900      	cmp	r1, #0
 8003aae:	d045      	beq.n	8003b3c <_free_r+0x94>
 8003ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab4:	1f0c      	subs	r4, r1, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfb8      	it	lt
 8003aba:	18e4      	addlt	r4, r4, r3
 8003abc:	f000 fd90 	bl	80045e0 <__malloc_lock>
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <_free_r+0x98>)
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	b933      	cbnz	r3, 8003ad6 <_free_r+0x2e>
 8003ac8:	6063      	str	r3, [r4, #4]
 8003aca:	6014      	str	r4, [r2, #0]
 8003acc:	4628      	mov	r0, r5
 8003ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad2:	f000 bd86 	b.w	80045e2 <__malloc_unlock>
 8003ad6:	42a3      	cmp	r3, r4
 8003ad8:	d90c      	bls.n	8003af4 <_free_r+0x4c>
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	1862      	adds	r2, r4, r1
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bf04      	itt	eq
 8003ae2:	681a      	ldreq	r2, [r3, #0]
 8003ae4:	685b      	ldreq	r3, [r3, #4]
 8003ae6:	6063      	str	r3, [r4, #4]
 8003ae8:	bf04      	itt	eq
 8003aea:	1852      	addeq	r2, r2, r1
 8003aec:	6022      	streq	r2, [r4, #0]
 8003aee:	6004      	str	r4, [r0, #0]
 8003af0:	e7ec      	b.n	8003acc <_free_r+0x24>
 8003af2:	4613      	mov	r3, r2
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	b10a      	cbz	r2, 8003afc <_free_r+0x54>
 8003af8:	42a2      	cmp	r2, r4
 8003afa:	d9fa      	bls.n	8003af2 <_free_r+0x4a>
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	1858      	adds	r0, r3, r1
 8003b00:	42a0      	cmp	r0, r4
 8003b02:	d10b      	bne.n	8003b1c <_free_r+0x74>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	4401      	add	r1, r0
 8003b08:	1858      	adds	r0, r3, r1
 8003b0a:	4282      	cmp	r2, r0
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	d1dd      	bne.n	8003acc <_free_r+0x24>
 8003b10:	6810      	ldr	r0, [r2, #0]
 8003b12:	6852      	ldr	r2, [r2, #4]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	4401      	add	r1, r0
 8003b18:	6019      	str	r1, [r3, #0]
 8003b1a:	e7d7      	b.n	8003acc <_free_r+0x24>
 8003b1c:	d902      	bls.n	8003b24 <_free_r+0x7c>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	e7d3      	b.n	8003acc <_free_r+0x24>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	1821      	adds	r1, r4, r0
 8003b28:	428a      	cmp	r2, r1
 8003b2a:	bf04      	itt	eq
 8003b2c:	6811      	ldreq	r1, [r2, #0]
 8003b2e:	6852      	ldreq	r2, [r2, #4]
 8003b30:	6062      	str	r2, [r4, #4]
 8003b32:	bf04      	itt	eq
 8003b34:	1809      	addeq	r1, r1, r0
 8003b36:	6021      	streq	r1, [r4, #0]
 8003b38:	605c      	str	r4, [r3, #4]
 8003b3a:	e7c7      	b.n	8003acc <_free_r+0x24>
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	bf00      	nop
 8003b40:	20006030 	.word	0x20006030

08003b44 <_malloc_r>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	1ccd      	adds	r5, r1, #3
 8003b48:	f025 0503 	bic.w	r5, r5, #3
 8003b4c:	3508      	adds	r5, #8
 8003b4e:	2d0c      	cmp	r5, #12
 8003b50:	bf38      	it	cc
 8003b52:	250c      	movcc	r5, #12
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	4606      	mov	r6, r0
 8003b58:	db01      	blt.n	8003b5e <_malloc_r+0x1a>
 8003b5a:	42a9      	cmp	r1, r5
 8003b5c:	d903      	bls.n	8003b66 <_malloc_r+0x22>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	2000      	movs	r0, #0
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	f000 fd3b 	bl	80045e0 <__malloc_lock>
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <_malloc_r+0xac>)
 8003b6c:	6814      	ldr	r4, [r2, #0]
 8003b6e:	4621      	mov	r1, r4
 8003b70:	b991      	cbnz	r1, 8003b98 <_malloc_r+0x54>
 8003b72:	4c20      	ldr	r4, [pc, #128]	; (8003bf4 <_malloc_r+0xb0>)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	b91b      	cbnz	r3, 8003b80 <_malloc_r+0x3c>
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f000 fc57 	bl	800442c <_sbrk_r>
 8003b7e:	6020      	str	r0, [r4, #0]
 8003b80:	4629      	mov	r1, r5
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 fc52 	bl	800442c <_sbrk_r>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d124      	bne.n	8003bd6 <_malloc_r+0x92>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	6033      	str	r3, [r6, #0]
 8003b90:	4630      	mov	r0, r6
 8003b92:	f000 fd26 	bl	80045e2 <__malloc_unlock>
 8003b96:	e7e4      	b.n	8003b62 <_malloc_r+0x1e>
 8003b98:	680b      	ldr	r3, [r1, #0]
 8003b9a:	1b5b      	subs	r3, r3, r5
 8003b9c:	d418      	bmi.n	8003bd0 <_malloc_r+0x8c>
 8003b9e:	2b0b      	cmp	r3, #11
 8003ba0:	d90f      	bls.n	8003bc2 <_malloc_r+0x7e>
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	50cd      	str	r5, [r1, r3]
 8003ba6:	18cc      	adds	r4, r1, r3
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f000 fd1a 	bl	80045e2 <__malloc_unlock>
 8003bae:	f104 000b 	add.w	r0, r4, #11
 8003bb2:	1d23      	adds	r3, r4, #4
 8003bb4:	f020 0007 	bic.w	r0, r0, #7
 8003bb8:	1ac3      	subs	r3, r0, r3
 8003bba:	d0d3      	beq.n	8003b64 <_malloc_r+0x20>
 8003bbc:	425a      	negs	r2, r3
 8003bbe:	50e2      	str	r2, [r4, r3]
 8003bc0:	e7d0      	b.n	8003b64 <_malloc_r+0x20>
 8003bc2:	428c      	cmp	r4, r1
 8003bc4:	684b      	ldr	r3, [r1, #4]
 8003bc6:	bf16      	itet	ne
 8003bc8:	6063      	strne	r3, [r4, #4]
 8003bca:	6013      	streq	r3, [r2, #0]
 8003bcc:	460c      	movne	r4, r1
 8003bce:	e7eb      	b.n	8003ba8 <_malloc_r+0x64>
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	6849      	ldr	r1, [r1, #4]
 8003bd4:	e7cc      	b.n	8003b70 <_malloc_r+0x2c>
 8003bd6:	1cc4      	adds	r4, r0, #3
 8003bd8:	f024 0403 	bic.w	r4, r4, #3
 8003bdc:	42a0      	cmp	r0, r4
 8003bde:	d005      	beq.n	8003bec <_malloc_r+0xa8>
 8003be0:	1a21      	subs	r1, r4, r0
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 fc22 	bl	800442c <_sbrk_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d0cf      	beq.n	8003b8c <_malloc_r+0x48>
 8003bec:	6025      	str	r5, [r4, #0]
 8003bee:	e7db      	b.n	8003ba8 <_malloc_r+0x64>
 8003bf0:	20006030 	.word	0x20006030
 8003bf4:	20006034 	.word	0x20006034

08003bf8 <__ssputs_r>:
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	688e      	ldr	r6, [r1, #8]
 8003bfe:	429e      	cmp	r6, r3
 8003c00:	4682      	mov	sl, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	4690      	mov	r8, r2
 8003c06:	4699      	mov	r9, r3
 8003c08:	d837      	bhi.n	8003c7a <__ssputs_r+0x82>
 8003c0a:	898a      	ldrh	r2, [r1, #12]
 8003c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c10:	d031      	beq.n	8003c76 <__ssputs_r+0x7e>
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	6909      	ldr	r1, [r1, #16]
 8003c16:	1a6f      	subs	r7, r5, r1
 8003c18:	6965      	ldr	r5, [r4, #20]
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c24:	f109 0301 	add.w	r3, r9, #1
 8003c28:	443b      	add	r3, r7
 8003c2a:	429d      	cmp	r5, r3
 8003c2c:	bf38      	it	cc
 8003c2e:	461d      	movcc	r5, r3
 8003c30:	0553      	lsls	r3, r2, #21
 8003c32:	d530      	bpl.n	8003c96 <__ssputs_r+0x9e>
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7ff ff85 	bl	8003b44 <_malloc_r>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	b950      	cbnz	r0, 8003c54 <__ssputs_r+0x5c>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	f8ca 3000 	str.w	r3, [sl]
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c54:	463a      	mov	r2, r7
 8003c56:	6921      	ldr	r1, [r4, #16]
 8003c58:	f000 fc9e 	bl	8004598 <memcpy>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	6126      	str	r6, [r4, #16]
 8003c6a:	6165      	str	r5, [r4, #20]
 8003c6c:	443e      	add	r6, r7
 8003c6e:	1bed      	subs	r5, r5, r7
 8003c70:	6026      	str	r6, [r4, #0]
 8003c72:	60a5      	str	r5, [r4, #8]
 8003c74:	464e      	mov	r6, r9
 8003c76:	454e      	cmp	r6, r9
 8003c78:	d900      	bls.n	8003c7c <__ssputs_r+0x84>
 8003c7a:	464e      	mov	r6, r9
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4641      	mov	r1, r8
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	f000 fc94 	bl	80045ae <memmove>
 8003c86:	68a3      	ldr	r3, [r4, #8]
 8003c88:	1b9b      	subs	r3, r3, r6
 8003c8a:	60a3      	str	r3, [r4, #8]
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	441e      	add	r6, r3
 8003c90:	6026      	str	r6, [r4, #0]
 8003c92:	2000      	movs	r0, #0
 8003c94:	e7dc      	b.n	8003c50 <__ssputs_r+0x58>
 8003c96:	462a      	mov	r2, r5
 8003c98:	f000 fca4 	bl	80045e4 <_realloc_r>
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d1e2      	bne.n	8003c68 <__ssputs_r+0x70>
 8003ca2:	6921      	ldr	r1, [r4, #16]
 8003ca4:	4650      	mov	r0, sl
 8003ca6:	f7ff feff 	bl	8003aa8 <_free_r>
 8003caa:	e7c8      	b.n	8003c3e <__ssputs_r+0x46>

08003cac <_svfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	461d      	mov	r5, r3
 8003cb2:	898b      	ldrh	r3, [r1, #12]
 8003cb4:	061f      	lsls	r7, r3, #24
 8003cb6:	b09d      	sub	sp, #116	; 0x74
 8003cb8:	4680      	mov	r8, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	4616      	mov	r6, r2
 8003cbe:	d50f      	bpl.n	8003ce0 <_svfiprintf_r+0x34>
 8003cc0:	690b      	ldr	r3, [r1, #16]
 8003cc2:	b96b      	cbnz	r3, 8003ce0 <_svfiprintf_r+0x34>
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	f7ff ff3d 	bl	8003b44 <_malloc_r>
 8003cca:	6020      	str	r0, [r4, #0]
 8003ccc:	6120      	str	r0, [r4, #16]
 8003cce:	b928      	cbnz	r0, 8003cdc <_svfiprintf_r+0x30>
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	f8c8 3000 	str.w	r3, [r8]
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	e0c8      	b.n	8003e6e <_svfiprintf_r+0x1c2>
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	6163      	str	r3, [r4, #20]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cea:	2330      	movs	r3, #48	; 0x30
 8003cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cf0:	9503      	str	r5, [sp, #12]
 8003cf2:	f04f 0b01 	mov.w	fp, #1
 8003cf6:	4637      	mov	r7, r6
 8003cf8:	463d      	mov	r5, r7
 8003cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cfe:	b10b      	cbz	r3, 8003d04 <_svfiprintf_r+0x58>
 8003d00:	2b25      	cmp	r3, #37	; 0x25
 8003d02:	d13e      	bne.n	8003d82 <_svfiprintf_r+0xd6>
 8003d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d08:	d00b      	beq.n	8003d22 <_svfiprintf_r+0x76>
 8003d0a:	4653      	mov	r3, sl
 8003d0c:	4632      	mov	r2, r6
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4640      	mov	r0, r8
 8003d12:	f7ff ff71 	bl	8003bf8 <__ssputs_r>
 8003d16:	3001      	adds	r0, #1
 8003d18:	f000 80a4 	beq.w	8003e64 <_svfiprintf_r+0x1b8>
 8003d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1e:	4453      	add	r3, sl
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	783b      	ldrb	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 809d 	beq.w	8003e64 <_svfiprintf_r+0x1b8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	9307      	str	r3, [sp, #28]
 8003d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d3e:	462f      	mov	r7, r5
 8003d40:	2205      	movs	r2, #5
 8003d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d46:	4850      	ldr	r0, [pc, #320]	; (8003e88 <_svfiprintf_r+0x1dc>)
 8003d48:	f7fc fa52 	bl	80001f0 <memchr>
 8003d4c:	9b04      	ldr	r3, [sp, #16]
 8003d4e:	b9d0      	cbnz	r0, 8003d86 <_svfiprintf_r+0xda>
 8003d50:	06d9      	lsls	r1, r3, #27
 8003d52:	bf44      	itt	mi
 8003d54:	2220      	movmi	r2, #32
 8003d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d5a:	071a      	lsls	r2, r3, #28
 8003d5c:	bf44      	itt	mi
 8003d5e:	222b      	movmi	r2, #43	; 0x2b
 8003d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d64:	782a      	ldrb	r2, [r5, #0]
 8003d66:	2a2a      	cmp	r2, #42	; 0x2a
 8003d68:	d015      	beq.n	8003d96 <_svfiprintf_r+0xea>
 8003d6a:	9a07      	ldr	r2, [sp, #28]
 8003d6c:	462f      	mov	r7, r5
 8003d6e:	2000      	movs	r0, #0
 8003d70:	250a      	movs	r5, #10
 8003d72:	4639      	mov	r1, r7
 8003d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d78:	3b30      	subs	r3, #48	; 0x30
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	d94d      	bls.n	8003e1a <_svfiprintf_r+0x16e>
 8003d7e:	b1b8      	cbz	r0, 8003db0 <_svfiprintf_r+0x104>
 8003d80:	e00f      	b.n	8003da2 <_svfiprintf_r+0xf6>
 8003d82:	462f      	mov	r7, r5
 8003d84:	e7b8      	b.n	8003cf8 <_svfiprintf_r+0x4c>
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <_svfiprintf_r+0x1dc>)
 8003d88:	1a80      	subs	r0, r0, r2
 8003d8a:	fa0b f000 	lsl.w	r0, fp, r0
 8003d8e:	4318      	orrs	r0, r3
 8003d90:	9004      	str	r0, [sp, #16]
 8003d92:	463d      	mov	r5, r7
 8003d94:	e7d3      	b.n	8003d3e <_svfiprintf_r+0x92>
 8003d96:	9a03      	ldr	r2, [sp, #12]
 8003d98:	1d11      	adds	r1, r2, #4
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	9103      	str	r1, [sp, #12]
 8003d9e:	2a00      	cmp	r2, #0
 8003da0:	db01      	blt.n	8003da6 <_svfiprintf_r+0xfa>
 8003da2:	9207      	str	r2, [sp, #28]
 8003da4:	e004      	b.n	8003db0 <_svfiprintf_r+0x104>
 8003da6:	4252      	negs	r2, r2
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	9207      	str	r2, [sp, #28]
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	783b      	ldrb	r3, [r7, #0]
 8003db2:	2b2e      	cmp	r3, #46	; 0x2e
 8003db4:	d10c      	bne.n	8003dd0 <_svfiprintf_r+0x124>
 8003db6:	787b      	ldrb	r3, [r7, #1]
 8003db8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dba:	d133      	bne.n	8003e24 <_svfiprintf_r+0x178>
 8003dbc:	9b03      	ldr	r3, [sp, #12]
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	9203      	str	r2, [sp, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bfb8      	it	lt
 8003dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dcc:	3702      	adds	r7, #2
 8003dce:	9305      	str	r3, [sp, #20]
 8003dd0:	4d2e      	ldr	r5, [pc, #184]	; (8003e8c <_svfiprintf_r+0x1e0>)
 8003dd2:	7839      	ldrb	r1, [r7, #0]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7fc fa0a 	bl	80001f0 <memchr>
 8003ddc:	b138      	cbz	r0, 8003dee <_svfiprintf_r+0x142>
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	1b40      	subs	r0, r0, r5
 8003de2:	fa03 f000 	lsl.w	r0, r3, r0
 8003de6:	9b04      	ldr	r3, [sp, #16]
 8003de8:	4303      	orrs	r3, r0
 8003dea:	3701      	adds	r7, #1
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	7839      	ldrb	r1, [r7, #0]
 8003df0:	4827      	ldr	r0, [pc, #156]	; (8003e90 <_svfiprintf_r+0x1e4>)
 8003df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003df6:	2206      	movs	r2, #6
 8003df8:	1c7e      	adds	r6, r7, #1
 8003dfa:	f7fc f9f9 	bl	80001f0 <memchr>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d038      	beq.n	8003e74 <_svfiprintf_r+0x1c8>
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <_svfiprintf_r+0x1e8>)
 8003e04:	bb13      	cbnz	r3, 8003e4c <_svfiprintf_r+0x1a0>
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	3307      	adds	r3, #7
 8003e0a:	f023 0307 	bic.w	r3, r3, #7
 8003e0e:	3308      	adds	r3, #8
 8003e10:	9303      	str	r3, [sp, #12]
 8003e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e14:	444b      	add	r3, r9
 8003e16:	9309      	str	r3, [sp, #36]	; 0x24
 8003e18:	e76d      	b.n	8003cf6 <_svfiprintf_r+0x4a>
 8003e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003e1e:	2001      	movs	r0, #1
 8003e20:	460f      	mov	r7, r1
 8003e22:	e7a6      	b.n	8003d72 <_svfiprintf_r+0xc6>
 8003e24:	2300      	movs	r3, #0
 8003e26:	3701      	adds	r7, #1
 8003e28:	9305      	str	r3, [sp, #20]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	250a      	movs	r5, #10
 8003e2e:	4638      	mov	r0, r7
 8003e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e34:	3a30      	subs	r2, #48	; 0x30
 8003e36:	2a09      	cmp	r2, #9
 8003e38:	d903      	bls.n	8003e42 <_svfiprintf_r+0x196>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0c8      	beq.n	8003dd0 <_svfiprintf_r+0x124>
 8003e3e:	9105      	str	r1, [sp, #20]
 8003e40:	e7c6      	b.n	8003dd0 <_svfiprintf_r+0x124>
 8003e42:	fb05 2101 	mla	r1, r5, r1, r2
 8003e46:	2301      	movs	r3, #1
 8003e48:	4607      	mov	r7, r0
 8003e4a:	e7f0      	b.n	8003e2e <_svfiprintf_r+0x182>
 8003e4c:	ab03      	add	r3, sp, #12
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4622      	mov	r2, r4
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <_svfiprintf_r+0x1ec>)
 8003e54:	a904      	add	r1, sp, #16
 8003e56:	4640      	mov	r0, r8
 8003e58:	f3af 8000 	nop.w
 8003e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e60:	4681      	mov	r9, r0
 8003e62:	d1d6      	bne.n	8003e12 <_svfiprintf_r+0x166>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	065b      	lsls	r3, r3, #25
 8003e68:	f53f af35 	bmi.w	8003cd6 <_svfiprintf_r+0x2a>
 8003e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e6e:	b01d      	add	sp, #116	; 0x74
 8003e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e74:	ab03      	add	r3, sp, #12
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <_svfiprintf_r+0x1ec>)
 8003e7c:	a904      	add	r1, sp, #16
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f000 f9c2 	bl	8004208 <_printf_i>
 8003e84:	e7ea      	b.n	8003e5c <_svfiprintf_r+0x1b0>
 8003e86:	bf00      	nop
 8003e88:	08004a2e 	.word	0x08004a2e
 8003e8c:	08004a34 	.word	0x08004a34
 8003e90:	08004a38 	.word	0x08004a38
 8003e94:	00000000 	.word	0x00000000
 8003e98:	08003bf9 	.word	0x08003bf9

08003e9c <__sfputc_r>:
 8003e9c:	6893      	ldr	r3, [r2, #8]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	b410      	push	{r4}
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	da08      	bge.n	8003eba <__sfputc_r+0x1e>
 8003ea8:	6994      	ldr	r4, [r2, #24]
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	db01      	blt.n	8003eb2 <__sfputc_r+0x16>
 8003eae:	290a      	cmp	r1, #10
 8003eb0:	d103      	bne.n	8003eba <__sfputc_r+0x1e>
 8003eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb6:	f7ff bb3b 	b.w	8003530 <__swbuf_r>
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	1c58      	adds	r0, r3, #1
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	7019      	strb	r1, [r3, #0]
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <__sfputs_r>:
 8003eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	18d5      	adds	r5, r2, r3
 8003ed4:	42ac      	cmp	r4, r5
 8003ed6:	d101      	bne.n	8003edc <__sfputs_r+0x12>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e007      	b.n	8003eec <__sfputs_r+0x22>
 8003edc:	463a      	mov	r2, r7
 8003ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffda 	bl	8003e9c <__sfputc_r>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d1f3      	bne.n	8003ed4 <__sfputs_r+0xa>
 8003eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ef0 <_vfiprintf_r>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	b09d      	sub	sp, #116	; 0x74
 8003ef8:	4617      	mov	r7, r2
 8003efa:	461d      	mov	r5, r3
 8003efc:	4606      	mov	r6, r0
 8003efe:	b118      	cbz	r0, 8003f08 <_vfiprintf_r+0x18>
 8003f00:	6983      	ldr	r3, [r0, #24]
 8003f02:	b90b      	cbnz	r3, 8003f08 <_vfiprintf_r+0x18>
 8003f04:	f7ff fcc4 	bl	8003890 <__sinit>
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <_vfiprintf_r+0x20c>)
 8003f0a:	429c      	cmp	r4, r3
 8003f0c:	d158      	bne.n	8003fc0 <_vfiprintf_r+0xd0>
 8003f0e:	6874      	ldr	r4, [r6, #4]
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	0718      	lsls	r0, r3, #28
 8003f14:	d55e      	bpl.n	8003fd4 <_vfiprintf_r+0xe4>
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d05b      	beq.n	8003fd4 <_vfiprintf_r+0xe4>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f20:	2320      	movs	r3, #32
 8003f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f26:	2330      	movs	r3, #48	; 0x30
 8003f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2c:	9503      	str	r5, [sp, #12]
 8003f2e:	f04f 0b01 	mov.w	fp, #1
 8003f32:	46b8      	mov	r8, r7
 8003f34:	4645      	mov	r5, r8
 8003f36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f3a:	b10b      	cbz	r3, 8003f40 <_vfiprintf_r+0x50>
 8003f3c:	2b25      	cmp	r3, #37	; 0x25
 8003f3e:	d154      	bne.n	8003fea <_vfiprintf_r+0xfa>
 8003f40:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f44:	d00b      	beq.n	8003f5e <_vfiprintf_r+0x6e>
 8003f46:	4653      	mov	r3, sl
 8003f48:	463a      	mov	r2, r7
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff ffbc 	bl	8003eca <__sfputs_r>
 8003f52:	3001      	adds	r0, #1
 8003f54:	f000 80c2 	beq.w	80040dc <_vfiprintf_r+0x1ec>
 8003f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5a:	4453      	add	r3, sl
 8003f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5e:	f898 3000 	ldrb.w	r3, [r8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80ba 	beq.w	80040dc <_vfiprintf_r+0x1ec>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	9307      	str	r3, [sp, #28]
 8003f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f7c:	46a8      	mov	r8, r5
 8003f7e:	2205      	movs	r2, #5
 8003f80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003f84:	485e      	ldr	r0, [pc, #376]	; (8004100 <_vfiprintf_r+0x210>)
 8003f86:	f7fc f933 	bl	80001f0 <memchr>
 8003f8a:	9b04      	ldr	r3, [sp, #16]
 8003f8c:	bb78      	cbnz	r0, 8003fee <_vfiprintf_r+0xfe>
 8003f8e:	06d9      	lsls	r1, r3, #27
 8003f90:	bf44      	itt	mi
 8003f92:	2220      	movmi	r2, #32
 8003f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f98:	071a      	lsls	r2, r3, #28
 8003f9a:	bf44      	itt	mi
 8003f9c:	222b      	movmi	r2, #43	; 0x2b
 8003f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fa2:	782a      	ldrb	r2, [r5, #0]
 8003fa4:	2a2a      	cmp	r2, #42	; 0x2a
 8003fa6:	d02a      	beq.n	8003ffe <_vfiprintf_r+0x10e>
 8003fa8:	9a07      	ldr	r2, [sp, #28]
 8003faa:	46a8      	mov	r8, r5
 8003fac:	2000      	movs	r0, #0
 8003fae:	250a      	movs	r5, #10
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb6:	3b30      	subs	r3, #48	; 0x30
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d969      	bls.n	8004090 <_vfiprintf_r+0x1a0>
 8003fbc:	b360      	cbz	r0, 8004018 <_vfiprintf_r+0x128>
 8003fbe:	e024      	b.n	800400a <_vfiprintf_r+0x11a>
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <_vfiprintf_r+0x214>)
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d101      	bne.n	8003fca <_vfiprintf_r+0xda>
 8003fc6:	68b4      	ldr	r4, [r6, #8]
 8003fc8:	e7a2      	b.n	8003f10 <_vfiprintf_r+0x20>
 8003fca:	4b4f      	ldr	r3, [pc, #316]	; (8004108 <_vfiprintf_r+0x218>)
 8003fcc:	429c      	cmp	r4, r3
 8003fce:	bf08      	it	eq
 8003fd0:	68f4      	ldreq	r4, [r6, #12]
 8003fd2:	e79d      	b.n	8003f10 <_vfiprintf_r+0x20>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7ff fafc 	bl	80035d4 <__swsetup_r>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d09d      	beq.n	8003f1c <_vfiprintf_r+0x2c>
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	b01d      	add	sp, #116	; 0x74
 8003fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fea:	46a8      	mov	r8, r5
 8003fec:	e7a2      	b.n	8003f34 <_vfiprintf_r+0x44>
 8003fee:	4a44      	ldr	r2, [pc, #272]	; (8004100 <_vfiprintf_r+0x210>)
 8003ff0:	1a80      	subs	r0, r0, r2
 8003ff2:	fa0b f000 	lsl.w	r0, fp, r0
 8003ff6:	4318      	orrs	r0, r3
 8003ff8:	9004      	str	r0, [sp, #16]
 8003ffa:	4645      	mov	r5, r8
 8003ffc:	e7be      	b.n	8003f7c <_vfiprintf_r+0x8c>
 8003ffe:	9a03      	ldr	r2, [sp, #12]
 8004000:	1d11      	adds	r1, r2, #4
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	9103      	str	r1, [sp, #12]
 8004006:	2a00      	cmp	r2, #0
 8004008:	db01      	blt.n	800400e <_vfiprintf_r+0x11e>
 800400a:	9207      	str	r2, [sp, #28]
 800400c:	e004      	b.n	8004018 <_vfiprintf_r+0x128>
 800400e:	4252      	negs	r2, r2
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	9207      	str	r2, [sp, #28]
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	f898 3000 	ldrb.w	r3, [r8]
 800401c:	2b2e      	cmp	r3, #46	; 0x2e
 800401e:	d10e      	bne.n	800403e <_vfiprintf_r+0x14e>
 8004020:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004024:	2b2a      	cmp	r3, #42	; 0x2a
 8004026:	d138      	bne.n	800409a <_vfiprintf_r+0x1aa>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9203      	str	r2, [sp, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfb8      	it	lt
 8004034:	f04f 33ff 	movlt.w	r3, #4294967295
 8004038:	f108 0802 	add.w	r8, r8, #2
 800403c:	9305      	str	r3, [sp, #20]
 800403e:	4d33      	ldr	r5, [pc, #204]	; (800410c <_vfiprintf_r+0x21c>)
 8004040:	f898 1000 	ldrb.w	r1, [r8]
 8004044:	2203      	movs	r2, #3
 8004046:	4628      	mov	r0, r5
 8004048:	f7fc f8d2 	bl	80001f0 <memchr>
 800404c:	b140      	cbz	r0, 8004060 <_vfiprintf_r+0x170>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	1b40      	subs	r0, r0, r5
 8004052:	fa03 f000 	lsl.w	r0, r3, r0
 8004056:	9b04      	ldr	r3, [sp, #16]
 8004058:	4303      	orrs	r3, r0
 800405a:	f108 0801 	add.w	r8, r8, #1
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	f898 1000 	ldrb.w	r1, [r8]
 8004064:	482a      	ldr	r0, [pc, #168]	; (8004110 <_vfiprintf_r+0x220>)
 8004066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800406a:	2206      	movs	r2, #6
 800406c:	f108 0701 	add.w	r7, r8, #1
 8004070:	f7fc f8be 	bl	80001f0 <memchr>
 8004074:	2800      	cmp	r0, #0
 8004076:	d037      	beq.n	80040e8 <_vfiprintf_r+0x1f8>
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <_vfiprintf_r+0x224>)
 800407a:	bb1b      	cbnz	r3, 80040c4 <_vfiprintf_r+0x1d4>
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	3307      	adds	r3, #7
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	3308      	adds	r3, #8
 8004086:	9303      	str	r3, [sp, #12]
 8004088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408a:	444b      	add	r3, r9
 800408c:	9309      	str	r3, [sp, #36]	; 0x24
 800408e:	e750      	b.n	8003f32 <_vfiprintf_r+0x42>
 8004090:	fb05 3202 	mla	r2, r5, r2, r3
 8004094:	2001      	movs	r0, #1
 8004096:	4688      	mov	r8, r1
 8004098:	e78a      	b.n	8003fb0 <_vfiprintf_r+0xc0>
 800409a:	2300      	movs	r3, #0
 800409c:	f108 0801 	add.w	r8, r8, #1
 80040a0:	9305      	str	r3, [sp, #20]
 80040a2:	4619      	mov	r1, r3
 80040a4:	250a      	movs	r5, #10
 80040a6:	4640      	mov	r0, r8
 80040a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ac:	3a30      	subs	r2, #48	; 0x30
 80040ae:	2a09      	cmp	r2, #9
 80040b0:	d903      	bls.n	80040ba <_vfiprintf_r+0x1ca>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0c3      	beq.n	800403e <_vfiprintf_r+0x14e>
 80040b6:	9105      	str	r1, [sp, #20]
 80040b8:	e7c1      	b.n	800403e <_vfiprintf_r+0x14e>
 80040ba:	fb05 2101 	mla	r1, r5, r1, r2
 80040be:	2301      	movs	r3, #1
 80040c0:	4680      	mov	r8, r0
 80040c2:	e7f0      	b.n	80040a6 <_vfiprintf_r+0x1b6>
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	4622      	mov	r2, r4
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <_vfiprintf_r+0x228>)
 80040cc:	a904      	add	r1, sp, #16
 80040ce:	4630      	mov	r0, r6
 80040d0:	f3af 8000 	nop.w
 80040d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040d8:	4681      	mov	r9, r0
 80040da:	d1d5      	bne.n	8004088 <_vfiprintf_r+0x198>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	065b      	lsls	r3, r3, #25
 80040e0:	f53f af7e 	bmi.w	8003fe0 <_vfiprintf_r+0xf0>
 80040e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040e6:	e77d      	b.n	8003fe4 <_vfiprintf_r+0xf4>
 80040e8:	ab03      	add	r3, sp, #12
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4622      	mov	r2, r4
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <_vfiprintf_r+0x228>)
 80040f0:	a904      	add	r1, sp, #16
 80040f2:	4630      	mov	r0, r6
 80040f4:	f000 f888 	bl	8004208 <_printf_i>
 80040f8:	e7ec      	b.n	80040d4 <_vfiprintf_r+0x1e4>
 80040fa:	bf00      	nop
 80040fc:	080049e4 	.word	0x080049e4
 8004100:	08004a2e 	.word	0x08004a2e
 8004104:	08004a04 	.word	0x08004a04
 8004108:	080049c4 	.word	0x080049c4
 800410c:	08004a34 	.word	0x08004a34
 8004110:	08004a38 	.word	0x08004a38
 8004114:	00000000 	.word	0x00000000
 8004118:	08003ecb 	.word	0x08003ecb

0800411c <_printf_common>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	4691      	mov	r9, r2
 8004122:	461f      	mov	r7, r3
 8004124:	688a      	ldr	r2, [r1, #8]
 8004126:	690b      	ldr	r3, [r1, #16]
 8004128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800412c:	4293      	cmp	r3, r2
 800412e:	bfb8      	it	lt
 8004130:	4613      	movlt	r3, r2
 8004132:	f8c9 3000 	str.w	r3, [r9]
 8004136:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800413a:	4606      	mov	r6, r0
 800413c:	460c      	mov	r4, r1
 800413e:	b112      	cbz	r2, 8004146 <_printf_common+0x2a>
 8004140:	3301      	adds	r3, #1
 8004142:	f8c9 3000 	str.w	r3, [r9]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	0699      	lsls	r1, r3, #26
 800414a:	bf42      	ittt	mi
 800414c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004150:	3302      	addmi	r3, #2
 8004152:	f8c9 3000 	strmi.w	r3, [r9]
 8004156:	6825      	ldr	r5, [r4, #0]
 8004158:	f015 0506 	ands.w	r5, r5, #6
 800415c:	d107      	bne.n	800416e <_printf_common+0x52>
 800415e:	f104 0a19 	add.w	sl, r4, #25
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	f8d9 2000 	ldr.w	r2, [r9]
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	42ab      	cmp	r3, r5
 800416c:	dc28      	bgt.n	80041c0 <_printf_common+0xa4>
 800416e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	3300      	adds	r3, #0
 8004176:	bf18      	it	ne
 8004178:	2301      	movne	r3, #1
 800417a:	0692      	lsls	r2, r2, #26
 800417c:	d42d      	bmi.n	80041da <_printf_common+0xbe>
 800417e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004182:	4639      	mov	r1, r7
 8004184:	4630      	mov	r0, r6
 8004186:	47c0      	blx	r8
 8004188:	3001      	adds	r0, #1
 800418a:	d020      	beq.n	80041ce <_printf_common+0xb2>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	68e5      	ldr	r5, [r4, #12]
 8004190:	f8d9 2000 	ldr.w	r2, [r9]
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	2b04      	cmp	r3, #4
 800419a:	bf08      	it	eq
 800419c:	1aad      	subeq	r5, r5, r2
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	6922      	ldr	r2, [r4, #16]
 80041a2:	bf0c      	ite	eq
 80041a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a8:	2500      	movne	r5, #0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	bfc4      	itt	gt
 80041ae:	1a9b      	subgt	r3, r3, r2
 80041b0:	18ed      	addgt	r5, r5, r3
 80041b2:	f04f 0900 	mov.w	r9, #0
 80041b6:	341a      	adds	r4, #26
 80041b8:	454d      	cmp	r5, r9
 80041ba:	d11a      	bne.n	80041f2 <_printf_common+0xd6>
 80041bc:	2000      	movs	r0, #0
 80041be:	e008      	b.n	80041d2 <_printf_common+0xb6>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4652      	mov	r2, sl
 80041c4:	4639      	mov	r1, r7
 80041c6:	4630      	mov	r0, r6
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d103      	bne.n	80041d6 <_printf_common+0xba>
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d6:	3501      	adds	r5, #1
 80041d8:	e7c3      	b.n	8004162 <_printf_common+0x46>
 80041da:	18e1      	adds	r1, r4, r3
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	2030      	movs	r0, #48	; 0x30
 80041e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e4:	4422      	add	r2, r4
 80041e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ee:	3302      	adds	r3, #2
 80041f0:	e7c5      	b.n	800417e <_printf_common+0x62>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4622      	mov	r2, r4
 80041f6:	4639      	mov	r1, r7
 80041f8:	4630      	mov	r0, r6
 80041fa:	47c0      	blx	r8
 80041fc:	3001      	adds	r0, #1
 80041fe:	d0e6      	beq.n	80041ce <_printf_common+0xb2>
 8004200:	f109 0901 	add.w	r9, r9, #1
 8004204:	e7d8      	b.n	80041b8 <_printf_common+0x9c>
	...

08004208 <_printf_i>:
 8004208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800420c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004210:	460c      	mov	r4, r1
 8004212:	7e09      	ldrb	r1, [r1, #24]
 8004214:	b085      	sub	sp, #20
 8004216:	296e      	cmp	r1, #110	; 0x6e
 8004218:	4617      	mov	r7, r2
 800421a:	4606      	mov	r6, r0
 800421c:	4698      	mov	r8, r3
 800421e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004220:	f000 80b3 	beq.w	800438a <_printf_i+0x182>
 8004224:	d822      	bhi.n	800426c <_printf_i+0x64>
 8004226:	2963      	cmp	r1, #99	; 0x63
 8004228:	d036      	beq.n	8004298 <_printf_i+0x90>
 800422a:	d80a      	bhi.n	8004242 <_printf_i+0x3a>
 800422c:	2900      	cmp	r1, #0
 800422e:	f000 80b9 	beq.w	80043a4 <_printf_i+0x19c>
 8004232:	2958      	cmp	r1, #88	; 0x58
 8004234:	f000 8083 	beq.w	800433e <_printf_i+0x136>
 8004238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004240:	e032      	b.n	80042a8 <_printf_i+0xa0>
 8004242:	2964      	cmp	r1, #100	; 0x64
 8004244:	d001      	beq.n	800424a <_printf_i+0x42>
 8004246:	2969      	cmp	r1, #105	; 0x69
 8004248:	d1f6      	bne.n	8004238 <_printf_i+0x30>
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	0605      	lsls	r5, r0, #24
 8004250:	f103 0104 	add.w	r1, r3, #4
 8004254:	d52a      	bpl.n	80042ac <_printf_i+0xa4>
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6011      	str	r1, [r2, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da03      	bge.n	8004266 <_printf_i+0x5e>
 800425e:	222d      	movs	r2, #45	; 0x2d
 8004260:	425b      	negs	r3, r3
 8004262:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004266:	486f      	ldr	r0, [pc, #444]	; (8004424 <_printf_i+0x21c>)
 8004268:	220a      	movs	r2, #10
 800426a:	e039      	b.n	80042e0 <_printf_i+0xd8>
 800426c:	2973      	cmp	r1, #115	; 0x73
 800426e:	f000 809d 	beq.w	80043ac <_printf_i+0x1a4>
 8004272:	d808      	bhi.n	8004286 <_printf_i+0x7e>
 8004274:	296f      	cmp	r1, #111	; 0x6f
 8004276:	d020      	beq.n	80042ba <_printf_i+0xb2>
 8004278:	2970      	cmp	r1, #112	; 0x70
 800427a:	d1dd      	bne.n	8004238 <_printf_i+0x30>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	e003      	b.n	800428e <_printf_i+0x86>
 8004286:	2975      	cmp	r1, #117	; 0x75
 8004288:	d017      	beq.n	80042ba <_printf_i+0xb2>
 800428a:	2978      	cmp	r1, #120	; 0x78
 800428c:	d1d4      	bne.n	8004238 <_printf_i+0x30>
 800428e:	2378      	movs	r3, #120	; 0x78
 8004290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004294:	4864      	ldr	r0, [pc, #400]	; (8004428 <_printf_i+0x220>)
 8004296:	e055      	b.n	8004344 <_printf_i+0x13c>
 8004298:	6813      	ldr	r3, [r2, #0]
 800429a:	1d19      	adds	r1, r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6011      	str	r1, [r2, #0]
 80042a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a8:	2301      	movs	r3, #1
 80042aa:	e08c      	b.n	80043c6 <_printf_i+0x1be>
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042b4:	bf18      	it	ne
 80042b6:	b21b      	sxthne	r3, r3
 80042b8:	e7cf      	b.n	800425a <_printf_i+0x52>
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6010      	str	r0, [r2, #0]
 80042c2:	0628      	lsls	r0, r5, #24
 80042c4:	d501      	bpl.n	80042ca <_printf_i+0xc2>
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	e002      	b.n	80042d0 <_printf_i+0xc8>
 80042ca:	0668      	lsls	r0, r5, #25
 80042cc:	d5fb      	bpl.n	80042c6 <_printf_i+0xbe>
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	4854      	ldr	r0, [pc, #336]	; (8004424 <_printf_i+0x21c>)
 80042d2:	296f      	cmp	r1, #111	; 0x6f
 80042d4:	bf14      	ite	ne
 80042d6:	220a      	movne	r2, #10
 80042d8:	2208      	moveq	r2, #8
 80042da:	2100      	movs	r1, #0
 80042dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e0:	6865      	ldr	r5, [r4, #4]
 80042e2:	60a5      	str	r5, [r4, #8]
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	f2c0 8095 	blt.w	8004414 <_printf_i+0x20c>
 80042ea:	6821      	ldr	r1, [r4, #0]
 80042ec:	f021 0104 	bic.w	r1, r1, #4
 80042f0:	6021      	str	r1, [r4, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13d      	bne.n	8004372 <_printf_i+0x16a>
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	f040 808e 	bne.w	8004418 <_printf_i+0x210>
 80042fc:	4665      	mov	r5, ip
 80042fe:	2a08      	cmp	r2, #8
 8004300:	d10b      	bne.n	800431a <_printf_i+0x112>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	07db      	lsls	r3, r3, #31
 8004306:	d508      	bpl.n	800431a <_printf_i+0x112>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	bfde      	ittt	le
 8004310:	2330      	movle	r3, #48	; 0x30
 8004312:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004316:	f105 35ff 	addle.w	r5, r5, #4294967295
 800431a:	ebac 0305 	sub.w	r3, ip, r5
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	f8cd 8000 	str.w	r8, [sp]
 8004324:	463b      	mov	r3, r7
 8004326:	aa03      	add	r2, sp, #12
 8004328:	4621      	mov	r1, r4
 800432a:	4630      	mov	r0, r6
 800432c:	f7ff fef6 	bl	800411c <_printf_common>
 8004330:	3001      	adds	r0, #1
 8004332:	d14d      	bne.n	80043d0 <_printf_i+0x1c8>
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b005      	add	sp, #20
 800433a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800433e:	4839      	ldr	r0, [pc, #228]	; (8004424 <_printf_i+0x21c>)
 8004340:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	6821      	ldr	r1, [r4, #0]
 8004348:	1d1d      	adds	r5, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6015      	str	r5, [r2, #0]
 800434e:	060a      	lsls	r2, r1, #24
 8004350:	d50b      	bpl.n	800436a <_printf_i+0x162>
 8004352:	07ca      	lsls	r2, r1, #31
 8004354:	bf44      	itt	mi
 8004356:	f041 0120 	orrmi.w	r1, r1, #32
 800435a:	6021      	strmi	r1, [r4, #0]
 800435c:	b91b      	cbnz	r3, 8004366 <_printf_i+0x15e>
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	f022 0220 	bic.w	r2, r2, #32
 8004364:	6022      	str	r2, [r4, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	e7b7      	b.n	80042da <_printf_i+0xd2>
 800436a:	064d      	lsls	r5, r1, #25
 800436c:	bf48      	it	mi
 800436e:	b29b      	uxthmi	r3, r3
 8004370:	e7ef      	b.n	8004352 <_printf_i+0x14a>
 8004372:	4665      	mov	r5, ip
 8004374:	fbb3 f1f2 	udiv	r1, r3, r2
 8004378:	fb02 3311 	mls	r3, r2, r1, r3
 800437c:	5cc3      	ldrb	r3, [r0, r3]
 800437e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004382:	460b      	mov	r3, r1
 8004384:	2900      	cmp	r1, #0
 8004386:	d1f5      	bne.n	8004374 <_printf_i+0x16c>
 8004388:	e7b9      	b.n	80042fe <_printf_i+0xf6>
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	6961      	ldr	r1, [r4, #20]
 8004390:	1d18      	adds	r0, r3, #4
 8004392:	6010      	str	r0, [r2, #0]
 8004394:	0628      	lsls	r0, r5, #24
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	d501      	bpl.n	800439e <_printf_i+0x196>
 800439a:	6019      	str	r1, [r3, #0]
 800439c:	e002      	b.n	80043a4 <_printf_i+0x19c>
 800439e:	066a      	lsls	r2, r5, #25
 80043a0:	d5fb      	bpl.n	800439a <_printf_i+0x192>
 80043a2:	8019      	strh	r1, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	6123      	str	r3, [r4, #16]
 80043a8:	4665      	mov	r5, ip
 80043aa:	e7b9      	b.n	8004320 <_printf_i+0x118>
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	1d19      	adds	r1, r3, #4
 80043b0:	6011      	str	r1, [r2, #0]
 80043b2:	681d      	ldr	r5, [r3, #0]
 80043b4:	6862      	ldr	r2, [r4, #4]
 80043b6:	2100      	movs	r1, #0
 80043b8:	4628      	mov	r0, r5
 80043ba:	f7fb ff19 	bl	80001f0 <memchr>
 80043be:	b108      	cbz	r0, 80043c4 <_printf_i+0x1bc>
 80043c0:	1b40      	subs	r0, r0, r5
 80043c2:	6060      	str	r0, [r4, #4]
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ce:	e7a7      	b.n	8004320 <_printf_i+0x118>
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	462a      	mov	r2, r5
 80043d4:	4639      	mov	r1, r7
 80043d6:	4630      	mov	r0, r6
 80043d8:	47c0      	blx	r8
 80043da:	3001      	adds	r0, #1
 80043dc:	d0aa      	beq.n	8004334 <_printf_i+0x12c>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	079b      	lsls	r3, r3, #30
 80043e2:	d413      	bmi.n	800440c <_printf_i+0x204>
 80043e4:	68e0      	ldr	r0, [r4, #12]
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	4298      	cmp	r0, r3
 80043ea:	bfb8      	it	lt
 80043ec:	4618      	movlt	r0, r3
 80043ee:	e7a3      	b.n	8004338 <_printf_i+0x130>
 80043f0:	2301      	movs	r3, #1
 80043f2:	464a      	mov	r2, r9
 80043f4:	4639      	mov	r1, r7
 80043f6:	4630      	mov	r0, r6
 80043f8:	47c0      	blx	r8
 80043fa:	3001      	adds	r0, #1
 80043fc:	d09a      	beq.n	8004334 <_printf_i+0x12c>
 80043fe:	3501      	adds	r5, #1
 8004400:	68e3      	ldr	r3, [r4, #12]
 8004402:	9a03      	ldr	r2, [sp, #12]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	42ab      	cmp	r3, r5
 8004408:	dcf2      	bgt.n	80043f0 <_printf_i+0x1e8>
 800440a:	e7eb      	b.n	80043e4 <_printf_i+0x1dc>
 800440c:	2500      	movs	r5, #0
 800440e:	f104 0919 	add.w	r9, r4, #25
 8004412:	e7f5      	b.n	8004400 <_printf_i+0x1f8>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ac      	bne.n	8004372 <_printf_i+0x16a>
 8004418:	7803      	ldrb	r3, [r0, #0]
 800441a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800441e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004422:	e76c      	b.n	80042fe <_printf_i+0xf6>
 8004424:	08004a3f 	.word	0x08004a3f
 8004428:	08004a50 	.word	0x08004a50

0800442c <_sbrk_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4c06      	ldr	r4, [pc, #24]	; (8004448 <_sbrk_r+0x1c>)
 8004430:	2300      	movs	r3, #0
 8004432:	4605      	mov	r5, r0
 8004434:	4608      	mov	r0, r1
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	f7fc ff74 	bl	8001324 <_sbrk>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_sbrk_r+0x1a>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	b103      	cbz	r3, 8004446 <_sbrk_r+0x1a>
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200060c0 	.word	0x200060c0

0800444c <__sread>:
 800444c:	b510      	push	{r4, lr}
 800444e:	460c      	mov	r4, r1
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	f000 f8ec 	bl	8004630 <_read_r>
 8004458:	2800      	cmp	r0, #0
 800445a:	bfab      	itete	ge
 800445c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800445e:	89a3      	ldrhlt	r3, [r4, #12]
 8004460:	181b      	addge	r3, r3, r0
 8004462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004466:	bfac      	ite	ge
 8004468:	6563      	strge	r3, [r4, #84]	; 0x54
 800446a:	81a3      	strhlt	r3, [r4, #12]
 800446c:	bd10      	pop	{r4, pc}

0800446e <__swrite>:
 800446e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004472:	461f      	mov	r7, r3
 8004474:	898b      	ldrh	r3, [r1, #12]
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	4605      	mov	r5, r0
 800447a:	460c      	mov	r4, r1
 800447c:	4616      	mov	r6, r2
 800447e:	d505      	bpl.n	800448c <__swrite+0x1e>
 8004480:	2302      	movs	r3, #2
 8004482:	2200      	movs	r2, #0
 8004484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004488:	f000 f874 	bl	8004574 <_lseek_r>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	4632      	mov	r2, r6
 800449a:	463b      	mov	r3, r7
 800449c:	4628      	mov	r0, r5
 800449e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a2:	f000 b823 	b.w	80044ec <_write_r>

080044a6 <__sseek>:
 80044a6:	b510      	push	{r4, lr}
 80044a8:	460c      	mov	r4, r1
 80044aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ae:	f000 f861 	bl	8004574 <_lseek_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	bf15      	itete	ne
 80044b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044c2:	81a3      	strheq	r3, [r4, #12]
 80044c4:	bf18      	it	ne
 80044c6:	81a3      	strhne	r3, [r4, #12]
 80044c8:	bd10      	pop	{r4, pc}

080044ca <__sclose>:
 80044ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ce:	f000 b81f 	b.w	8004510 <_close_r>

080044d2 <__ascii_wctomb>:
 80044d2:	b149      	cbz	r1, 80044e8 <__ascii_wctomb+0x16>
 80044d4:	2aff      	cmp	r2, #255	; 0xff
 80044d6:	bf85      	ittet	hi
 80044d8:	238a      	movhi	r3, #138	; 0x8a
 80044da:	6003      	strhi	r3, [r0, #0]
 80044dc:	700a      	strbls	r2, [r1, #0]
 80044de:	f04f 30ff 	movhi.w	r0, #4294967295
 80044e2:	bf98      	it	ls
 80044e4:	2001      	movls	r0, #1
 80044e6:	4770      	bx	lr
 80044e8:	4608      	mov	r0, r1
 80044ea:	4770      	bx	lr

080044ec <_write_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4c07      	ldr	r4, [pc, #28]	; (800450c <_write_r+0x20>)
 80044f0:	4605      	mov	r5, r0
 80044f2:	4608      	mov	r0, r1
 80044f4:	4611      	mov	r1, r2
 80044f6:	2200      	movs	r2, #0
 80044f8:	6022      	str	r2, [r4, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f7fc fec1 	bl	8001282 <_write>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_write_r+0x1e>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	b103      	cbz	r3, 800450a <_write_r+0x1e>
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	200060c0 	.word	0x200060c0

08004510 <_close_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4c06      	ldr	r4, [pc, #24]	; (800452c <_close_r+0x1c>)
 8004514:	2300      	movs	r3, #0
 8004516:	4605      	mov	r5, r0
 8004518:	4608      	mov	r0, r1
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	f7fc fecd 	bl	80012ba <_close>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_close_r+0x1a>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	b103      	cbz	r3, 800452a <_close_r+0x1a>
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	200060c0 	.word	0x200060c0

08004530 <_fstat_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4c07      	ldr	r4, [pc, #28]	; (8004550 <_fstat_r+0x20>)
 8004534:	2300      	movs	r3, #0
 8004536:	4605      	mov	r5, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	f7fc fec8 	bl	80012d2 <_fstat>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d102      	bne.n	800454c <_fstat_r+0x1c>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	b103      	cbz	r3, 800454c <_fstat_r+0x1c>
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	bd38      	pop	{r3, r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	200060c0 	.word	0x200060c0

08004554 <_isatty_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4c06      	ldr	r4, [pc, #24]	; (8004570 <_isatty_r+0x1c>)
 8004558:	2300      	movs	r3, #0
 800455a:	4605      	mov	r5, r0
 800455c:	4608      	mov	r0, r1
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	f7fc fec7 	bl	80012f2 <_isatty>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_isatty_r+0x1a>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	b103      	cbz	r3, 800456e <_isatty_r+0x1a>
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	200060c0 	.word	0x200060c0

08004574 <_lseek_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4c07      	ldr	r4, [pc, #28]	; (8004594 <_lseek_r+0x20>)
 8004578:	4605      	mov	r5, r0
 800457a:	4608      	mov	r0, r1
 800457c:	4611      	mov	r1, r2
 800457e:	2200      	movs	r2, #0
 8004580:	6022      	str	r2, [r4, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fc fec0 	bl	8001308 <_lseek>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_lseek_r+0x1e>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	b103      	cbz	r3, 8004592 <_lseek_r+0x1e>
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	200060c0 	.word	0x200060c0

08004598 <memcpy>:
 8004598:	b510      	push	{r4, lr}
 800459a:	1e43      	subs	r3, r0, #1
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	d100      	bne.n	80045a4 <memcpy+0xc>
 80045a2:	bd10      	pop	{r4, pc}
 80045a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ac:	e7f7      	b.n	800459e <memcpy+0x6>

080045ae <memmove>:
 80045ae:	4288      	cmp	r0, r1
 80045b0:	b510      	push	{r4, lr}
 80045b2:	eb01 0302 	add.w	r3, r1, r2
 80045b6:	d807      	bhi.n	80045c8 <memmove+0x1a>
 80045b8:	1e42      	subs	r2, r0, #1
 80045ba:	4299      	cmp	r1, r3
 80045bc:	d00a      	beq.n	80045d4 <memmove+0x26>
 80045be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045c6:	e7f8      	b.n	80045ba <memmove+0xc>
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d9f5      	bls.n	80045b8 <memmove+0xa>
 80045cc:	1881      	adds	r1, r0, r2
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	42d3      	cmn	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memmove+0x28>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045de:	e7f7      	b.n	80045d0 <memmove+0x22>

080045e0 <__malloc_lock>:
 80045e0:	4770      	bx	lr

080045e2 <__malloc_unlock>:
 80045e2:	4770      	bx	lr

080045e4 <_realloc_r>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	4607      	mov	r7, r0
 80045e8:	4614      	mov	r4, r2
 80045ea:	460e      	mov	r6, r1
 80045ec:	b921      	cbnz	r1, 80045f8 <_realloc_r+0x14>
 80045ee:	4611      	mov	r1, r2
 80045f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045f4:	f7ff baa6 	b.w	8003b44 <_malloc_r>
 80045f8:	b922      	cbnz	r2, 8004604 <_realloc_r+0x20>
 80045fa:	f7ff fa55 	bl	8003aa8 <_free_r>
 80045fe:	4625      	mov	r5, r4
 8004600:	4628      	mov	r0, r5
 8004602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004604:	f000 f826 	bl	8004654 <_malloc_usable_size_r>
 8004608:	42a0      	cmp	r0, r4
 800460a:	d20f      	bcs.n	800462c <_realloc_r+0x48>
 800460c:	4621      	mov	r1, r4
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff fa98 	bl	8003b44 <_malloc_r>
 8004614:	4605      	mov	r5, r0
 8004616:	2800      	cmp	r0, #0
 8004618:	d0f2      	beq.n	8004600 <_realloc_r+0x1c>
 800461a:	4631      	mov	r1, r6
 800461c:	4622      	mov	r2, r4
 800461e:	f7ff ffbb 	bl	8004598 <memcpy>
 8004622:	4631      	mov	r1, r6
 8004624:	4638      	mov	r0, r7
 8004626:	f7ff fa3f 	bl	8003aa8 <_free_r>
 800462a:	e7e9      	b.n	8004600 <_realloc_r+0x1c>
 800462c:	4635      	mov	r5, r6
 800462e:	e7e7      	b.n	8004600 <_realloc_r+0x1c>

08004630 <_read_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4c07      	ldr	r4, [pc, #28]	; (8004650 <_read_r+0x20>)
 8004634:	4605      	mov	r5, r0
 8004636:	4608      	mov	r0, r1
 8004638:	4611      	mov	r1, r2
 800463a:	2200      	movs	r2, #0
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc fe02 	bl	8001248 <_read>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_read_r+0x1e>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	b103      	cbz	r3, 800464e <_read_r+0x1e>
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	200060c0 	.word	0x200060c0

08004654 <_malloc_usable_size_r>:
 8004654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004658:	1f18      	subs	r0, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfbc      	itt	lt
 800465e:	580b      	ldrlt	r3, [r1, r0]
 8004660:	18c0      	addlt	r0, r0, r3
 8004662:	4770      	bx	lr

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
